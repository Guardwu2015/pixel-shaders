precision mediump float;

varying vec2 position;

void main() {
  vec2 pos = position - vec2(0.5, 0.5);
  
  float samples = 16.;
  float stepSize = 1. / 50. / samples;
  vec2 step = vec2(stepSize, stepSize);
  
  float count = 0.;
  for (float i = 0.0; i < 16.; i++) {
    for (float  j = 0.0; j < 16.; j++) {
      vec2 p = pos + vec2(i*step.x, j*step.x);
      
      float radius = length(p);
      count += (radius > 0.4) ? 1. : -1.;
      
    }
  }
  
  gl_FragColor = vec4(0.,0.,0.,1.);
  gl_FragColor.r = abs(count) / (samples*samples);
}




















precision mediump float;

varying vec2 position;
uniform float time;




//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}


float fbm( vec3 p )
{
    float f = 0.0;
    f += 0.50000*snoise( p ); p = p*2.02;
    f += 0.25000*snoise( p ); p = p*2.03;
    f += 0.12500*snoise( p ); p = p*2.01;
    f += 0.06250*snoise( p ); p = p*2.04;
    f += 0.03125*snoise( p );
    return f/0.984375;
}




vec4 image(vec2 position, float time) {
  vec3 p = vec3(position*3., time*0.1);
  
  vec3 q = vec3(fbm(p), fbm(p+2.), fbm(p+7.));
  
  float v = fbm(p + q*0.5) + 0.5;
  return vec4(v, q.x+0.5, q.z+0.5, 1.0);
}


void main() {
  gl_FragColor = image(position, time);
}


























precision mediump float;

varying vec2 position;
uniform float time;




//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}


float fbm( vec3 p )
{
    float f = 0.0;
    f += 0.50000*snoise( p ); p = p*2.02;
    //f += 0.25000*snoise( p ); p = p*2.03;
    //f += 0.12500*snoise( p ); p = p*2.01;
    //f += 0.06250*snoise( p ); p = p*2.04;
    //f += 0.03125*snoise( p );
    return f/0.984375;
}




vec4 image(vec2 position, float time) {
  vec3 p = vec3(position*3., time*0.1) * 10.;
  
  //vec3 q = vec3(fbm(p), fbm(p+2.), fbm(p+7.));
  
  float v = fbm(p);
  float w = fbm(vec3(v,v,v));
  float x = fbm(vec3(w,w,w));
  
  return vec4(vec3(w,w,w)+0.5, 1.);
}

float surface( vec3 coord ) {
  float n = 0.0;

  n += 1.0 * abs( snoise( coord*1. ) );
  n += 0.5 * abs( snoise( coord * 2.0 ) );
  n += 0.25 * abs( snoise( coord * 4.0 ) );
  n += 0.125 * abs( snoise( coord * 8.0 ) );

  float rn = 1.0 - n;

  return rn*rn;

}


void main() {
  float color = surface(vec3(position*3., time*0.1));
  vec4 c1 = vec4(0., 0.3, 0.3, 1.);
  vec4 c2 = vec4(0., 1.2, 0.8, 1.);
  
  gl_FragColor = mix(c1, c2, color);
}






















precision mediump float;

varying vec2 position;
uniform float time;




//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}


float fbm( vec3 p )
{
    float f = 0.0;
    f += 0.50000*snoise( p ); p = p*2.02;
    //f += 0.25000*snoise( p ); p = p*2.03;
    //f += 0.12500*snoise( p ); p = p*2.01;
    //f += 0.06250*snoise( p ); p = p*2.04;
    //f += 0.03125*snoise( p );
    return f/0.984375;
}




vec4 image(vec2 position, float time) {
  vec3 p = vec3(position*3., time*0.1) * 10.;
  
  //vec3 q = vec3(fbm(p), fbm(p+2.), fbm(p+7.));
  
  float v = fbm(p);
  float w = fbm(vec3(v,v,v));
  float x = fbm(vec3(w,w,w));
  
  return vec4(vec3(w,w,w)+0.5, 1.);
}

float surface( vec3 coord ) {
  float n = 0.0;

  n += 1.0 * abs( snoise( coord*1. ) );
  n += 0.5 * abs( snoise( coord * 2.0 ) );
  n += 0.25 * abs( snoise( coord * 4.0 ) );
  n += 0.125 * abs( snoise( coord * 8.0 ) );

  float rn = 1.0 - n;

  return rn*rn;

}


void main() {
  float color = surface(vec3(position*1., time*0.2));
  vec4 c1 = vec4(0., 0.0, 0.2, 1.);
  vec4 c2 = vec4(0.4, 1.4, 1.0, 1.);
  
  gl_FragColor = mix(c1, c2, color);
}


































precision mediump float;

varying vec2 position;
uniform float time;




//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}


float fbm( vec3 p )
{
    float f = 0.0;
    f += 0.50000*snoise( p ); p = p*2.02;
    //f += 0.25000*snoise( p ); p = p*2.03;
    //f += 0.12500*snoise( p ); p = p*2.01;
    //f += 0.06250*snoise( p ); p = p*2.04;
    //f += 0.03125*snoise( p );
    return f/0.984375;
}




vec4 image(vec2 position, float time) {
  vec3 p = vec3(position*3., time*0.1) * 10.;
  
  //vec3 q = vec3(fbm(p), fbm(p+2.), fbm(p+7.));
  
  float v = fbm(p);
  float w = fbm(vec3(v,v,v));
  float x = fbm(vec3(w,w,w));
  
  return vec4(vec3(w,w,w)+0.5, 1.);
}

float surface( vec3 coord ) {
  float n = 0.0;

  n += 1.0 * ( snoise( coord*1. ) );
  //n += 0.5 * ( snoise( coord * 2.0 ) );
  //n += 0.25 * ( snoise( coord * 4.0 ) );
  //n += 0.125 * ( snoise( coord * 8.0 ) );

  float rn = 1.0 - n;

  return rn*rn;

}


void main() {
  float color = surface(vec3(position*4., time*0.5));
  vec4 c1 = vec4(0., 0.0, 0.0, 1.);
  vec4 c2 = vec4(0.4, 0.4, 1.0, 1.);
  
  gl_FragColor = mix(c1, c2, smoothstep(0.49,0.5,color));
}


































precision mediump float;

varying vec2 position;
uniform float time;

// triangle wave from 0 to 1
float wrap(float n) {
	return abs(mod(n, 2.)-1.)*-1. + 1.;
}

// creates a cosine wave in the plane at a given angle
float wave(float angle, vec2 point) {
	float cth = cos(angle);
	float sth = sin(angle);
	return (cos (cth*point.x + sth*point.y) + 1.) / 2.;
}

// sum 7 cosine waves at various interfering angles
// wrap values when they exceed 1
float quasi(float interferenceAngle, vec2 point) {
	float sum = 0.;
	for (float i = 0.; i < 7.; i++) {
		sum += wave(3.1416*i*interferenceAngle, point);
	}
	return wrap(sum);
}

void main() {
  float b = quasi(time*0.01, (position-0.5)*50.);
  gl_FragColor = vec4(b,b,b,1.);
}
















precision mediump float;

varying vec2 position;

void main() {
  vec2 c = (position - 0.5)*4.;
  vec2 z = c;
  
  float escape = 0.;
  const float iter = 30.;
  for(float i = 0.; i<iter; i++) {
    escape = i;
    float x = (z.x * z.x - z.y * z.y) + c.x;
    float y = (z.y * z.x + z.x * z.y) + c.y;
	
    if ((x * x + y * y) > 80.0) break;
    z.x = x;
    z.y = y;
  }
  
  float b = escape/iter;
  
  gl_FragColor = vec4(b,b,b,1.);
}








precision mediump float;

varying vec2 position;

void main() {
  vec4 babyblue = vec4(0.0, 0.7, 1.0, 1.0);
  vec4 purple = vec4(0.5, 0.0, 0.7, 1.0);
  gl_FragColor = mix(babyblue, purple, position.x);
}




















precision mediump float;

varying vec2 position;
uniform float time;

const float waves = 19.;

// triangle wave from 0 to 1
float wrap(float n) {
  return abs(mod(n, 2.)-1.)*-1. + 1.;
}

// creates a cosine wave in the plane at a given angle
float wave(float angle, vec2 point) {
  float cth = cos(angle);
  float sth = sin(angle);
  return (cos (cth*point.x + sth*point.y) + 1.) / 2.;
}

// sum cosine waves at various interfering angles
// wrap values when they exceed 1
float quasi(float interferenceAngle, vec2 point) {
  float sum = 0.;
  for (float i = 0.; i < waves; i++) {
    sum += wave(3.1416*i*interferenceAngle, point);
  }
  return wrap(sum);
}

void main() {
  // center position and scale
  vec2 p = (position-0.5)*200.;
  
  // generate the quasicrystal, animate the interference angle
  float b = quasi(time*0.002, p);
  
  // use the value to mix between two colors
  vec4 c1 = vec4(0.0,0.0,0.1,1.);
  vec4 c2 = vec4(0.5,0.8,1.4,1.);
  gl_FragColor = mix(c1,c2,b);
}

















precision mediump float;

varying vec2 position;
uniform float time;

void main() {
  
  gl_FragColor.g = (sin(time*0.4+position.y/3.)+1.)/2.;
  gl_FragColor.b = (sin(time*0.14+position.y)+1.)/2.;
  
  gl_FragColor.r = smoothstep(0.3,0.31,length(position-0.5));
  
  gl_FragColor.a = 1.0;
}































precision mediump float;

varying vec2 position;
uniform float time;

float hash(float n) {
  return fract(sin(n)*23942.234);
}

float noise(vec3 p) {
  vec3 w = floor(p);
  vec3 k = fract(p);
  k = k*k*(3.-2.*k);
  
  float n = w.x + w.y*23. + w.z*47.;
  
  float a = hash(n);
  float b = hash(n+1.);
  float c = hash(n+23.);
  float d = hash(n+24.);
  float e = hash(n+47.);
  float f = hash(n+48.);
  float g = hash(n+70.);
  float h = hash(n+71.);
  
  return mix(
    mix(
      mix(a, b, k.x),
      mix(c, d, k.x),
      k.y),
    mix(
      mix(e, f, k.x),
      mix(g, h, k.x),
      k.y),
    k.z);
}

void main() {
  float b = noise(vec3(position*60., time));
  vec3 col = vec3(b);
  gl_FragColor = vec4(col, 1.);
}






























precision mediump float;

varying vec2 position;
uniform float time;

float hash(float n) {
  return fract(sin(n)*93942.234);
}

float noise(vec3 p) {
  vec3 w = floor(p);
  vec3 k = fract(p);
  k = k*k*(3.-2.*k);
  
  float n = w.x + w.y*57. + w.z*113.;
  
  float a = hash(n);
  float b = hash(n+1.);
  float c = hash(n+57.);
  float d = hash(n+58.);
  float e = hash(n+113.);
  float f = hash(n+114.);
  float g = hash(n+170.);
  float h = hash(n+171.);
  
  return mix(
    mix(
      mix(a, b, k.x),
      mix(c, d, k.x),
      k.y),
    mix(
      mix(e, f, k.x),
      mix(g, h, k.x),
      k.y),
    k.z);
}

float fbm(vec3 p) {
  float f = 0.;
  f += 0.5000*noise(p); p *= 2.02;
  f += 0.2500*noise(p); p *= 2.01;
  f += 0.1250*noise(p); p *= 2.03;
  f += 0.0625*noise(p);
  f /= 0.9375;
  return f;
}

void main() {
  vec3 p = vec3(position*5., time);
  
  vec3 a = vec3(fbm(p), fbm(p+8.1), fbm(p+2.));
  vec3 b = vec3(fbm(p + a*4. + 3.1), fbm(p + a*4. + 1.1), fbm(p + a*4. + 2.9));
  
  vec3 col = mix(b, vec3(0.2,0.6,0.8), 0.6);
  gl_FragColor = vec4(col, 1.);
}












precision mediump float;

varying vec2 position;
uniform float time;

mat2 m = mat2(0.6,0.8,-0.8,0.6);

float hash(float n) {
  return fract(sin(n)*93942.234);
}

float noise(vec2 p) {
  vec2 w = floor(p);
  vec2 k = fract(p);
  k = k*k*(3.-2.*k);
  
  float n = w.x + w.y*57.;
  
  float a = hash(n);
  float b = hash(n+1.);
  float c = hash(n+57.);
  float d = hash(n+58.);
  
  return mix(
    mix(a, b, k.x),
    mix(c, d, k.x),
    k.y);
}

float fbm(vec2 p) {
  float f = 0.;
  f += 0.5000*noise(p); p *= 2.02*m;
  f += 0.2500*noise(p); p *= 2.01*m;
  f += 0.1250*noise(p); p *= 2.03*m;
  f += 0.0625*noise(p);
  f /= 0.9375;
  return f;
}

void main() {
  vec2 p = vec2(position*6.);
  float t = time * .005;
  
  vec2 a = vec2(fbm(p+t), fbm(p-t*2.+8.1));
  vec2 b = vec2(fbm(p+t*3. + a*7. + 53.1), fbm(p-t + a*7. + 91.1));
  float c = fbm(b*9. + t*2.);
  
  vec3 col = vec3(c);
  col.rb += b*0.15;
  gl_FragColor = vec4(col, 1.);
}




























precision mediump float;

varying vec2 position;
uniform float time;
uniform vec2 resolution;

mat2 m = mat2(0.6,0.8,-0.8,0.6);

float hash(float n) {
  return fract(sin(n)*93942.234);
}

float noise(vec2 p) {
  vec2 w = floor(p);
  vec2 k = fract(p);
  k = k*k*(3.-2.*k);
  
  float n = w.x + w.y*57.;
  
  float a = hash(n);
  float b = hash(n+1.);
  float c = hash(n+57.);
  float d = hash(n+58.);
  
  return mix(
    mix(a, b, k.x),
    mix(c, d, k.x),
    k.y);
}

float fbm(vec2 p) {
  float f = 0.;
  f += 0.5000*noise(p); p *= 2.02*m;
  f += 0.2500*noise(p); p *= 2.01*m;
  f += 0.1250*noise(p); p *= 2.03*m;
  f += 0.0625*noise(p);
  f /= 0.9375;
  return f;
}

void main() {
  vec2 p = vec2(position*6.)*vec2(resolution.x/resolution.y, 1.);
  float t = time * .008;
  
  vec2 a = vec2(fbm(p+t*3.), fbm(p-t*3.+8.1));
  vec2 b = vec2(fbm(p+t*4. + a*7. + 3.1), fbm(p-t*4. + a*7. + 91.1));
  float c = fbm(b*9. + t*20.);
  
  c = smoothstep(0.1,0.98,c);
  
  vec3 col = vec3(c);
  col.rb += b*0.15;
  gl_FragColor = vec4(col, 1.);
}






















precision mediump float;

varying vec2 position;
uniform float time;
uniform vec2 resolution;

mat2 m = mat2(0.6,0.8,-0.8,0.6);

float hash(float n) {
  return fract(sin(n)*93942.234);
}

float noise(vec2 p) {
  vec2 w = floor(p);
  vec2 k = fract(p);
  k = k*k*(3.-2.*k);
  
  float n = w.x + w.y*57.;
  
  float a = hash(n);
  float b = hash(n+1.);
  float c = hash(n+57.);
  float d = hash(n+58.);
  
  return mix(
    mix(a, b, k.x),
    mix(c, d, k.x),
    k.y);
}

float fbm(vec2 p) {
  float f = 0.;
  f += 0.5000*noise(p); p *= 2.02*m;
  f += 0.2500*noise(p); p *= 2.01*m;
  f += 0.1250*noise(p); p *= 2.03*m;
  f += 0.0625*noise(p);
  f /= 0.9375;
  return f;
}

void main() {
  vec2 p = vec2(position*6.)*vec2(resolution.x/resolution.y, 1.);
  float t = time * .009;
  
  vec2 a = vec2(fbm(p+t*3.), fbm(p-t*3.+8.1));
  vec2 b = vec2(fbm(p+t*4. + a*7. + 3.1), fbm(p-t*4. + a*7. + 91.1));
  float c = fbm(b*9. + t*20.);
  
  c = smoothstep(0.1,0.98,c);
  
  vec3 col = vec3(c);
  col.rb += b*0.17;
  gl_FragColor = vec4(col, 1.);
}








// inspired by http://www.iquilezles.org/www/articles/warp/warp.htm

precision mediump float;

varying vec2 position;
uniform float time;
uniform vec2 resolution;

// makes a pseudorandom number between 0 and 1
float hash(float n) {
  return fract(sin(n)*93942.234);
}

// smoothsteps a grid of random numbers at the integers
float noise(vec2 p) {
  vec2 w = floor(p);
  vec2 k = fract(p);
  k = k*k*(3.-2.*k); // smooth it
  
  float n = w.x + w.y*57.;
  
  float a = hash(n);
  float b = hash(n+1.);
  float c = hash(n+57.);
  float d = hash(n+58.);
  
  return mix(
    mix(a, b, k.x),
    mix(c, d, k.x),
    k.y);
}

// rotation matrix
mat2 m = mat2(0.6,0.8,-0.8,0.6);

// fractal brownian motion (i.e. photoshop clouds)
float fbm(vec2 p) {
  float f = 0.;
  f += 0.5000*noise(p); p *= 2.02*m;
  f += 0.2500*noise(p); p *= 2.01*m;
  f += 0.1250*noise(p); p *= 2.03*m;
  f += 0.0625*noise(p);
  f /= 0.9375;
  return f;
}

void main() {
  // relative coordinates
  vec2 p = vec2(position*6.)*vec2(resolution.x/resolution.y, 1.);
  float t = time * .009;
  
  // calling fbm on itself
  vec2 a = vec2(fbm(p+t*3.), fbm(p-t*3.+8.1));
  vec2 b = vec2(fbm(p+t*4. + a*7. + 3.1), fbm(p-t*4. + a*7. + 91.1));
  float c = fbm(b*9. + t*20.);
  
  // increase contrast
  c = smoothstep(0.15,0.98,c);
  
  c = fbm(position + time + fbm(position*20. + vec2(time, 0.)));
  
  // mix in some color
  vec3 col = vec3(c);
  //col.rb += b*0.17;
  
  gl_FragColor = vec4(col, 1.);
}
































precision mediump float;

uniform float time;
varying vec2 position;

void main() {
  vec2 p = position - 0.5;
  float t = sin(time)*300.;
  
  gl_FragColor.r = fract(t*p.y);
  gl_FragColor.g = 0.0;
  gl_FragColor.b = fract(t*p.x);
  gl_FragColor.a = 1.0;
}










// inspired by http://www.iquilezles.org/www/articles/warp/warp.htm

precision mediump float;

varying vec2 position;
uniform float time;
uniform vec2 resolution;

// makes a pseudorandom number between 0 and 1
float hash(float n) {
  return fract(sin(n)*93942.234);
}

// smoothsteps a grid of random numbers at the integers
float noise(vec2 p) {
  vec2 w = floor(p);
  vec2 k = fract(p);
  k = k*k*(3.-2.*k); // smooth it
  
  float z = 57.;
  
  float n = w.x + w.y*z;
  
  float a = hash(n);
  float b = hash(n+1.);
  float c = hash(n+z);
  float d = hash(n+z+1.);
  
  return mix(
    mix(a, b, k.x),
    mix(c, d, k.x),
    k.y);
}

// rotation matrix
mat2 m = mat2(1.,0.,0.,1.);

// fractional brownian motion (i.e. photoshop clouds)
float fbm(vec2 p) {
  float f = 0.;
  f += 0.5000*noise(p); p *= 2.02*m;
  f += 0.2500*noise(p); p *= 2.01*m;
  f += 0.1250*noise(p); p *= 2.03*m;
  f += 0.0625*noise(p);
  f /= 0.9375;
  return f;
}

void main() {
  // relative coordinates
  vec2 p = vec2(position*5.)*vec2(resolution.x/resolution.y, 1.);
  //float ang = 3.14159/4.;
  //p *= mat2(cos(ang), sin(ang), -sin(ang), cos(ang));
  
  //p.y += time*.3;
  
  float t = time * .295;
  
  // calling fbm on itself
  vec2 a = vec2(fbm(p), fbm(p+8.1));
  vec2 b = vec2(fbm(p*.1 + a*7. + 3.1), fbm(p*.1+t + a*7. + 91.1));
  float c = fbm(b*10. + t*9.);
  
  // increase contrast
  c = smoothstep(0.15,0.98,c);
  
  // mix in some color
  vec3 col = vec3(c*0.0);
  col.rg += b*0.87;
  col.rb += a*0.81;
  
  gl_FragColor = vec4(col, 1.);
}













// inspired by http://www.iquilezles.org/www/articles/warp/warp.htm

precision mediump float;

varying vec2 position;
uniform float time;
uniform vec2 resolution;

// makes a pseudorandom number between 0 and 1
float hash(float n) {
  return fract(sin(n)*93942.234);
}

// smoothsteps a grid of random numbers at the integers
float noise(vec2 p) {
  vec2 w = floor(p);
  vec2 k = fract(p);
  k = k*k*(3.-2.*k); // smooth it
  
  float z = 57.;
  
  float n = w.x + w.y*z;
  
  float a = hash(n);
  float b = hash(n+1.);
  float c = hash(n+z);
  float d = hash(n+z+1.);
  
  return mix(
    mix(a, b, k.x),
    mix(c, d, k.x),
    k.y);
}

// rotation matrix
mat2 m = mat2(1.,0.,0.,1.);

// fractional brownian motion (i.e. photoshop clouds)
float fbm(vec2 p) {
  float f = 0.;
  f += 0.5000*noise(p); p *= 2.02*m;
  f += 0.2500*noise(p); p *= 2.01*m;
  f += 0.1250*noise(p); p *= 2.03*m;
  f += 0.0625*noise(p);
  f /= 0.9375;
  return f;
}

void main() {
  // relative coordinates
  vec2 p = vec2((position-.5)*8.)*vec2(resolution.x/resolution.y, 1.);
  //float ang = 3.14159/4.;
  float ang = time;
  //p *= mat2(cos(ang), sin(ang), -sin(ang), cos(ang));
  
  //p *= cos(time)*.1 + 2.;
  
  float t = time * 1.9;  
  float amount = 0.1;
  
  // calling fbm on itself
  vec2 a = vec2(fbm(p+t*.01), fbm(p+8.1));
  vec2 b = vec2(fbm(p*.1+cos(t)*amount + a*7. + 3.1), fbm(p*.1+sin(t)*amount + a*7. + 91.1));
  float c = fbm(b*10. + t*9.);
  
  // increase contrast
  c = smoothstep(0.15,0.98,c);
  
  // mix in some color
  vec3 col = vec3(c*0.);
  col.rgb += vec3(b,b.x*1.25)*0.97;
  col.brg += vec3(a,a.x*.1)*.5;
  col.b /= 1.2;
  col -= .3;
  col.r += col.g;
  col.g /= 1.4;
  
  //col = smoothstep(0.4, 1.0, col);
  
  gl_FragColor = vec4(col, 1.);
}