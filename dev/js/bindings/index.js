// Generated by CoffeeScript 1.4.0
(function() {
  var $, XRegExp, build, buildEvaluator, buildShaderExample, buildShaderExercise, clear, ko, parseUniforms, rafAnimate, shaderModel, sizeCanvas, srcTrim, startTime, testEqualPixelArrays, updateUniforms, vertexShaderSource, _,
    __hasProp = {}.hasOwnProperty;

  ko = require("knockout");

  $ = require("jquery");

  _ = require("underscore");

  clear = function(ctx) {
    var h, w;
    w = ctx.canvas.width;
    h = ctx.canvas.height;
    return ctx.clearRect(0, 0, w, h);
  };

  sizeCanvas = function(canvas) {
    var h, w;
    w = $(canvas).width();
    h = $(canvas).height();
    canvas.width = w;
    return canvas.height = h;
  };

  srcTrim = function(s) {
    var indent, line, lineIndent, lines, _i, _len;
    lines = s.split("\n");
    indent = Infinity;
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      lineIndent = line.search(/[^ ]/);
      if (lineIndent !== -1) {
        indent = Math.min(indent, lineIndent);
      }
    }
    if (indent !== Infinity) {
      lines = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
          line = lines[_j];
          _results.push(line.substr(indent));
        }
        return _results;
      })();
    }
    return lines.join("\n").trim();
  };

  XRegExp = require('xregexp').XRegExp;

  parseUniforms = function(src) {
    var regex, uniforms;
    regex = XRegExp('uniform +(?<type>[^ ]+) +(?<name>[^ ;]+) *;', 'g');
    uniforms = {};
    XRegExp.forEach(src, regex, function(match) {
      return uniforms[match.name] = {
        type: match.type
      };
    });
    return uniforms;
  };

  rafAnimate = function(callback) {
    var animate;
    animate = function() {
      require("raf")(animate);
      return callback();
    };
    return animate();
  };

  ko.bindingHandlers.drawGrid = {
    init: function(element, valueAccessor) {
      var ctx, draw, o;
      o = valueAccessor();
      sizeCanvas(element);
      ctx = element.getContext("2d");
      draw = function() {
        var bounds, opts;
        clear(ctx);
        bounds = o.bounds();
        opts = {
          ctx: ctx,
          minX: bounds.minX,
          maxX: bounds.maxX,
          minY: bounds.minY,
          maxY: bounds.maxY,
          flipY: true,
          color: "0,0,0",
          shadow: false
        };
        if (o.color === "white") {
          opts.color = "255,255,255";
          opts.shadow = true;
        } else if (o.color === "black") {
          opts.color = "0,0,0";
          opts.shadow = false;
        }
        return require("graph-grid")(opts);
      };
      return ko.computed(draw);
    }
  };

  ko.bindingHandlers.panAndZoom = {
    init: function(element, valueAccessor) {
      var o, pz;
      o = valueAccessor();
      pz = require("pan-zoom")({
        element: element,
        flipY: true
      });
      ko.computed(function() {
        var bounds;
        bounds = o.bounds();
        pz.minX = bounds.minX;
        pz.maxX = bounds.maxX;
        pz.minY = bounds.minY;
        return pz.maxY = bounds.maxY;
      });
      pz.on("update", function() {
        return o.bounds({
          minX: pz.minX,
          maxX: pz.maxX,
          minY: pz.minY,
          maxY: pz.maxY
        });
      });
      if (o.position) {
        return pz.on("position", function(x, y) {
          return o.position([x, y]);
        });
      }
    }
  };

  ko.bindingHandlers.relPosition = {
    init: function(element, valueAccessor) {
      var $element, o;
      o = valueAccessor();
      $element = $(element);
      return ko.computed(function() {
        var bounds, height, position, width, x, y;
        bounds = o.bounds();
        position = o.position();
        width = $element.parent().width();
        height = $element.parent().height();
        x = width * (position[0] - bounds.minX) / (bounds.maxX - bounds.minX);
        y = height * (1 - (position[1] - bounds.minY)) / (bounds.maxY - bounds.minY);
        $element.css("left", x);
        return $element.css("top", y);
      });
    }
  };

  ko.bindingHandlers.editorShader = {
    init: function(element, valueAccessor) {
      var editor, o;
      o = valueAccessor();
      editor = require("editor")({
        div: element,
        src: o.src(),
        multiline: o.multiline
      });
      editor.on("change", function() {
        return o.src(editor.src());
      });
      o.src.subscribe(function(newSrc) {
        if (newSrc !== editor.src()) {
          return editor.codemirror.setValue(newSrc);
        }
      });
      if (o.errors) {
        ko.computed(function() {
          return editor.set({
            errors: o.errors()
          });
        });
      }
      if (o.annotations) {
        return ko.computed(function() {
          return editor.set({
            annotations: o.annotations()
          });
        });
      }
    }
  };

  ko.bindingHandlers.syntaxHighlight = {
    update: function(element, valueAccessor) {
      var v;
      v = ko.utils.unwrapObservable(valueAccessor());
      return require("codemirror").runMode(v, "text/x-glsl", element);
    }
  };

  vertexShaderSource = "precision mediump float;\n\nattribute vec3 vertexPosition;\nvarying vec2 position;\nuniform vec2 boundsMin;\nuniform vec2 boundsMax;\n\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1.0);\n  position = mix(boundsMin, boundsMax, (vertexPosition.xy + 1.0) * 0.5);\n}";

  ko.bindingHandlers.drawShader = {
    init: function(element, valueAccessor) {
      var draw, o, shader;
      o = valueAccessor();
      shader = require("shader")({
        canvas: element,
        vertex: vertexShaderSource,
        fragment: o.src()
      });
      element.shader = shader;
      draw = function() {
        return shader.draw();
      };
      ko.computed(function() {
        shader.set({
          fragment: o.src()
        });
        return draw();
      });
      ko.computed(function() {
        var uniformValues;
        uniformValues = {};
        uniformValues.boundsMin = [o.bounds().minX, o.bounds().minY];
        uniformValues.boundsMax = [o.bounds().maxX, o.bounds().maxY];
        shader.set({
          uniforms: uniformValues
        });
        return draw();
      });
      return ko.computed(function() {
        var name, uniform, uniformValues, uniforms;
        uniforms = o.uniforms();
        uniformValues = {};
        for (name in uniforms) {
          if (!__hasProp.call(uniforms, name)) continue;
          uniform = uniforms[name];
          if (uniform.value !== void 0) {
            uniformValues[name] = uniform.value;
          }
        }
        shader.set({
          uniforms: uniformValues
        });
        return draw();
      });
    }
  };

  startTime = Date.now();

  updateUniforms = function(uniformsObservable) {
    var changed, name, uniform, uniforms;
    uniforms = uniformsObservable();
    changed = false;
    for (name in uniforms) {
      if (!__hasProp.call(uniforms, name)) continue;
      uniform = uniforms[name];
      if (name === "time" && uniform.type === "float") {
        uniform.value = (Date.now() - startTime) / 1000;
        changed = true;
      } else if (name === "webcam" && uniform.type === "sampler2D") {
        uniform.value = require("webcam")();
        changed = true;
      }
    }
    if (changed) {
      return uniformsObservable(uniforms);
    }
  };

  shaderModel = function(src) {
    var model, parsedSrc;
    model = {
      bounds: ko.observable({
        minX: 0,
        minY: 0,
        maxX: 1,
        maxY: 1
      }),
      src: ko.observable(src),
      compiledSrc: ko.observable(src),
      errors: ko.observable([]),
      annotations: ko.observable([]),
      uniforms: ko.observable({}),
      position: ko.observable([0.3, 0.4])
    };
    rafAnimate(function() {
      return updateUniforms(model.uniforms);
    });
    ko.computed(function() {
      var errors;
      src = model.src();
      errors = require("glsl-error")(src);
      model.errors(errors);
      if (!_.some(errors)) {
        return model.compiledSrc(src);
      }
    });
    ko.computed(function() {
      src = model.compiledSrc();
      return model.uniforms(parseUniforms(src));
    });
    parsedSrc = ko.computed(function() {
      src = model.compiledSrc();
      try {
        return require("parse-glsl").parse(src, "fragment_start");
      } catch (_error) {}
    });
    (ko.computed(function() {
      var annotations, ast, env, name, position, round, uniform, uniforms, x;
      position = model.position();
      if (position) {
        round = function(x) {
          var mult;
          mult = Math.pow(10, 3);
          return Math.round(x * mult) / mult;
        };
        position = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = position.length; _i < _len; _i++) {
            x = position[_i];
            _results.push(round(x));
          }
          return _results;
        })();
        ast = parsedSrc();
        uniforms = model.uniforms();
        env = {
          gl_FragColor: [0, 0, 0, 0],
          position: position
        };
        for (name in uniforms) {
          if (!__hasProp.call(uniforms, name)) continue;
          uniform = uniforms[name];
          env[name] = _.isNumber(uniform.value) ? [uniform.value] : uniform.value;
        }
        try {
          require("interpret")(env, ast);
          annotations = require("interpret").extractStatements(ast);
          return model.annotations(annotations);
        } catch (e) {
          model.annotations([]);
          return console.log(ast);
        }
      }
    })).extend({
      throttle: 1
    });
    return model;
  };

  buildShaderExample = function($replace) {
    var $div, model, src;
    src = srcTrim($replace.text());
    model = shaderModel(src);
    $div = $("<div class=\"book-view-edit\">\n  <div class=\"book-view\" data-bind=\"panAndZoom: {bounds: bounds, position: position}\">\n    <canvas data-bind=\"drawShader: {bounds: bounds, src: compiledSrc, uniforms: uniforms}\"></canvas>\n    <canvas class=\"book-grid\" data-bind=\"drawGrid: {bounds: bounds, color: 'white'}\"></canvas>\n    <!--<div class=\"book-crosshair\" data-bind=\"relPosition: {bounds: bounds, position: position}\"></div>-->\n  </div>\n  <div class=\"book-edit book-editor\" data-bind=\"editorShader: {src: src, multiline: true, errors: errors, annotations: annotations}\">\n  </div>\n</div>");
    $replace.replaceWith($div);
    return ko.applyBindings(model, $div[0]);
  };

  testEqualPixelArrays = function(p1, p2) {
    var diff, equivalent, i, len, location, _i;
    len = p1.length;
    equivalent = true;
    for (i = _i = 0; _i < 1000; i = ++_i) {
      location = Math.floor(Math.random() * len);
      diff = Math.abs(p1[location] - p2[location]);
      if (diff > 2) {
        equivalent = false;
      }
    }
    return equivalent;
  };

  buildShaderExercise = function($replace) {
    var $div, checkSolved, model, solutionModel, solutionSrcs, workModel, workSrcs;
    $div = $("<div>\n<div class=\"book-view-edit\">\n  <div class=\"book-view\" data-bind=\"panAndZoom: {bounds: work.bounds, position: work.position}\">\n    <canvas class=\"shader-work\" data-bind=\"drawShader: {bounds: work.bounds, src: work.compiledSrc, uniforms: work.uniforms}\"></canvas>\n    <canvas class=\"book-grid\" data-bind=\"drawGrid: {bounds: work.bounds, color: 'white'}\"></canvas>\n  </div>\n  <div class=\"book-edit book-editor\" data-bind=\"editorShader: {src: work.src, multiline: true, errors: work.errors, annotations: work.annotations}\">\n  </div>\n</div>\n<div class=\"book-view-edit\">\n  <div class=\"book-view\" data-bind=\"panAndZoom: {bounds: work.bounds, position: work.position}\">\n    <canvas class=\"shader-solution\" data-bind=\"drawShader: {bounds: work.bounds, src: solution.compiledSrc, uniforms: solution.uniforms}\"></canvas>\n    <canvas class=\"book-grid\" data-bind=\"drawGrid: {bounds: work.bounds, color: 'white'}\"></canvas>\n  </div>\n  <div class=\"book-edit\" style=\"font-family: helvetica; font-size: 30px;\">\n    <div style=\"float: left\">\n      <i class=\"icon-arrow-left\" style=\"font-size: 26px\"></i>\n    </div>\n    <div style=\"margin-left: 30px;\">\n      <div>\n        Make this\n      </div>\n      <div style=\"font-size: 48px\">\n        <span style=\"color: #090\" data-bind=\"visible: solved\"><i class=\"icon-ok\"></i> <span style=\"font-size: 42px; font-weight: bold\">Solved</span></span>&nbsp;\n      </div>\n      <div>\n        <button style=\"vertical-align: middle\" data-bind=\"disable: onFirst, event: {click: previous}\">&#x2190;</button>\n        <span data-bind=\"text: currentExercise()+1\"></span> of <span data-bind=\"text: numExercises\"></span>\n        <button style=\"vertical-align: middle\" data-bind=\"disable: onLast, event: {click: next}\">&#x2192;</button>\n      </div>\n    </div>\n  </div>\n</div>\n</div>");
    workSrcs = [srcTrim($replace.find("start").text())];
    workModel = shaderModel(workSrcs[0]);
    solutionSrcs = $replace.find("solution").map(function() {
      return srcTrim($(this).text());
    });
    solutionModel = shaderModel(solutionSrcs[0]);
    model = {
      work: workModel,
      solution: solutionModel,
      solved: ko.observable(false),
      currentExercise: ko.observable(0),
      numExercises: solutionSrcs.length
    };
    model.onFirst = ko.computed(function() {
      return model.currentExercise() === 0;
    });
    model.onLast = ko.computed(function() {
      return model.currentExercise() === model.numExercises - 1;
    });
    model.previous = function() {
      if (!model.onFirst()) {
        return model.currentExercise(model.currentExercise() - 1);
      }
    };
    model.next = function() {
      if (!model.onLast()) {
        return model.currentExercise(model.currentExercise() + 1);
      }
    };
    ko.computed(function() {
      var currentExercise;
      currentExercise = model.currentExercise();
      model.solution.src(solutionSrcs[currentExercise]);
      if (workSrcs[currentExercise]) {
        return model.work.src(workSrcs[currentExercise]);
      }
    });
    ko.computed(function() {
      var workSrc;
      workSrc = model.work.src();
      return workSrcs[model.currentExercise.peek()] = workSrc;
    });
    ko.computed(function() {
      model.work.compiledSrc();
      model.solution.compiledSrc();
      return setTimeout(checkSolved, 0);
    });
    checkSolved = function() {
      var solutionPixels, solved, workPixels, _ref, _ref1;
      workPixels = (_ref = $div.find(".shader-work")[0].shader) != null ? _ref.readPixels() : void 0;
      solutionPixels = (_ref1 = $div.find(".shader-solution")[0].shader) != null ? _ref1.readPixels() : void 0;
      if (workPixels && solutionPixels) {
        solved = testEqualPixelArrays(workPixels, solutionPixels);
        return model.solved(solved);
      }
    };
    $replace.replaceWith($div);
    return ko.applyBindings(model, $div[0]);
  };

  buildEvaluator = function($replace) {
    var $div, model, src;
    src = srcTrim($replace.text());
    $div = $("<div class=\"book-editor\" data-bind=\"editorShader: {src: src, multiline: false, annotations: annotations, errors: errors}\"></div>");
    model = {
      src: ko.observable(src),
      annotations: ko.observable([]),
      errors: ko.observable([])
    };
    ko.computed(function() {
      var ast, result;
      src = model.src();
      try {
        ast = require("parse-glsl").parse(src, "assignment_expression");
        require("interpret")({}, ast);
        result = require("interpret").vecToString(ast.evaluated, 3);
        model.annotations([
          {
            line: 0,
            message: result
          }
        ]);
        return model.errors([]);
      } catch (e) {
        model.annotations([]);
        return model.errors([
          {
            line: 0,
            message: ""
          }
        ]);
      }
    });
    $replace.replaceWith($div);
    return ko.applyBindings(model, $div[0]);
  };

  build = function($selection, buildFunction) {
    return $selection.each(function() {
      return buildFunction($(this));
    });
  };

  (function() {
    build($(".shader-example"), buildShaderExample);
    build($(".shader-exercise"), buildShaderExercise);
    return build($(".evaluator"), buildEvaluator);
  })();

}).call(this);
