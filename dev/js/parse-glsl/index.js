module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "vertex_start": parse_vertex_start,
        "fragment_start": parse_fragment_start,
        "newLine": parse_newLine,
        "EOF": parse_EOF,
        "_": parse__,
        "noNewlineComment": parse_noNewlineComment,
        "noNewlineWhitespace": parse_noNewlineWhitespace,
        "comment": parse_comment,
        "semicolon": parse_semicolon,
        "comma": parse_comma,
        "left_bracket": parse_left_bracket,
        "right_bracket": parse_right_bracket,
        "equals": parse_equals,
        "left_paren": parse_left_paren,
        "right_paren": parse_right_paren,
        "left_brace": parse_left_brace,
        "right_brace": parse_right_brace,
        "external_statement_list": parse_external_statement_list,
        "external_statement": parse_external_statement,
        "external_declaration": parse_external_declaration,
        "preprocessor_operator": parse_preprocessor_operator,
        "macro_identifier": parse_macro_identifier,
        "preprocessor_parameter_list": parse_preprocessor_parameter_list,
        "macro_paren_parameter": parse_macro_paren_parameter,
        "macro_call_parameter": parse_macro_call_parameter,
        "macro_call_parameter_list": parse_macro_call_parameter_list,
        "macro_call": parse_macro_call,
        "macro_call_line": parse_macro_call_line,
        "preprocessor_define": parse_preprocessor_define,
        "preprocessor_if": parse_preprocessor_if,
        "preprocessor_else_if": parse_preprocessor_else_if,
        "preprocessor_else": parse_preprocessor_else,
        "preprocessor_end": parse_preprocessor_end,
        "preprocessor_external_branch": parse_preprocessor_external_branch,
        "preprocessor_statement_branch": parse_preprocessor_statement_branch,
        "function_definition": parse_function_definition,
        "compound_statement": parse_compound_statement,
        "statement_list": parse_statement_list,
        "statement_no_new_scope": parse_statement_no_new_scope,
        "statement_with_scope": parse_statement_with_scope,
        "simple_statement": parse_simple_statement,
        "selection_statement": parse_selection_statement,
        "for_loop": parse_for_loop,
        "while_statement": parse_while_statement,
        "while_loop": parse_while_loop,
        "do_while": parse_do_while,
        "iteration_statement": parse_iteration_statement,
        "jump_statement": parse_jump_statement,
        "expression_statement": parse_expression_statement,
        "declaration": parse_declaration,
        "global_declaration": parse_global_declaration,
        "function_prototype_parameter_list": parse_function_prototype_parameter_list,
        "function_prototype": parse_function_prototype,
        "parameter_qualifier": parse_parameter_qualifier,
        "parameter_declaration": parse_parameter_declaration,
        "init_declarator_list": parse_init_declarator_list,
        "declarator_list": parse_declarator_list,
        "declarator_list_no_array": parse_declarator_list_no_array,
        "declarator_list_arrays_have_size": parse_declarator_list_arrays_have_size,
        "declarator_no_array": parse_declarator_no_array,
        "declarator_array_with_size": parse_declarator_array_with_size,
        "declarator": parse_declarator,
        "init_declarator": parse_init_declarator,
        "member_list": parse_member_list,
        "struct_definition": parse_struct_definition,
        "precision_type": parse_precision_type,
        "locally_specified_type": parse_locally_specified_type,
        "attribute_qualifier": parse_attribute_qualifier,
        "attribute_type": parse_attribute_type,
        "fully_specified_type": parse_fully_specified_type,
        "precision_qualifier": parse_precision_qualifier,
        "const_qualifier": parse_const_qualifier,
        "type_qualifier": parse_type_qualifier,
        "void_type": parse_void_type,
        "type_name": parse_type_name,
        "identifier": parse_identifier,
        "keyword": parse_keyword,
        "vector": parse_vector,
        "matrix": parse_matrix,
        "reserved": parse_reserved,
        "single_underscore_identifier": parse_single_underscore_identifier,
        "int_constant": parse_int_constant,
        "float_constant": parse_float_constant,
        "float_exponent": parse_float_exponent,
        "paren_expression": parse_paren_expression,
        "bool_constant": parse_bool_constant,
        "primary_expression": parse_primary_expression,
        "index_accessor": parse_index_accessor,
        "field_selector": parse_field_selector,
        "postfix_expression": parse_postfix_expression,
        "postfix_expression_no_repeat": parse_postfix_expression_no_repeat,
        "parameter_list": parse_parameter_list,
        "function_call": parse_function_call,
        "function_identifier": parse_function_identifier,
        "unary_expression": parse_unary_expression,
        "multiplicative_operator": parse_multiplicative_operator,
        "multiplicative_expression": parse_multiplicative_expression,
        "additive_operator": parse_additive_operator,
        "additive_expression": parse_additive_expression,
        "shift_operator": parse_shift_operator,
        "shift_expression": parse_shift_expression,
        "relational_operator": parse_relational_operator,
        "relational_expression": parse_relational_expression,
        "equality_operator": parse_equality_operator,
        "equality_expression": parse_equality_expression,
        "bitwise_and_operator": parse_bitwise_and_operator,
        "bitwise_and_expression": parse_bitwise_and_expression,
        "bitwise_xor_operator": parse_bitwise_xor_operator,
        "bitwise_xor_expression": parse_bitwise_xor_expression,
        "bitwise_or_operator": parse_bitwise_or_operator,
        "bitwise_or_expression": parse_bitwise_or_expression,
        "logical_and_operator": parse_logical_and_operator,
        "logical_and_expression": parse_logical_and_expression,
        "logical_xor_operator": parse_logical_xor_operator,
        "logical_xor_expression": parse_logical_xor_expression,
        "logical_or_operator": parse_logical_or_operator,
        "logical_or_expression": parse_logical_or_expression,
        "conditional_expression": parse_conditional_expression,
        "assignment_expression": parse_assignment_expression,
        "condition": parse_condition
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "external_statement_list";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_vertex_start() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {  shaderType = "vs"; return true; })(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          result1 = parse_external_statement_list();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, root) {
              return root;
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_fragment_start() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {  shaderType = "fs"; return true; })(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          result1 = parse_external_statement_list();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, root) {
              return root;
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_newLine() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[\n]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
            return "\n";
          })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_EOF() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        reportFailures++;
        if (input.length > pos.offset) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        
        reportFailures++;
        result1 = parse_newLine();
        if (result1 === null) {
          if (/^[\\\n]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[\\\\\\n]");
            }
          }
          if (result1 === null) {
            if (/^[\r\t\f\x0B ]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\\r\\t\\f\\x0B ]");
              }
            }
            if (result1 === null) {
              result1 = parse_comment();
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_newLine();
            if (result1 === null) {
              if (/^[\\\n]/.test(input.charAt(pos.offset))) {
                result1 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\\\\\n]");
                }
              }
              if (result1 === null) {
                if (/^[\r\t\f\x0B ]/.test(input.charAt(pos.offset))) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\r\\t\\f\\x0B ]");
                  }
                }
                if (result1 === null) {
                  result1 = parse_comment();
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      function parse_noNewlineComment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "/*") {
          result0 = "/*";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 2) === "*/") {
            result2 = "*/";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 2) === "//") {
            result0 = "//";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"//\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            if (/^[^\n]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n]");
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^\n]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_noNewlineWhitespace() {
        var result0, result1;
        
        if (/^[\r\t\f\x0B ]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[\\r\\t\\f\\x0B ]");
          }
        }
        if (result1 === null) {
          result1 = parse_noNewlineComment();
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[\r\t\f\x0B ]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\\r\\t\\f\\x0B ]");
              }
            }
            if (result1 === null) {
              result1 = parse_noNewlineComment();
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "/*") {
          result0 = "/*";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 2) === "*/") {
            result2 = "*/";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 2) === "//") {
            result0 = "//";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"//\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            if (/^[^\n]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n]");
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^\n]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result1 !== null) {
              result2 = parse_newLine();
              if (result2 === null) {
                result2 = parse_EOF();
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("comment");
        }
        return result0;
      }
      
      function parse_semicolon() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 59) {
            result1 = ";";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_comma() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 44) {
            result1 = ",";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_left_bracket() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 91) {
            result1 = "[";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_right_bracket() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 93) {
            result1 = "]";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"]\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_equals() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_left_paren() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 40) {
            result1 = "(";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_right_paren() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 41) {
            result1 = ")";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\")\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_left_brace() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 123) {
            result1 = "{";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"{\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_right_brace() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 125) {
            result1 = "}";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"}\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_external_statement_list() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_external_statement();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_external_statement();
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, statements) {
              // Skip blank statements.  These were either whitespace or
              var result = new node({line:line,column:column,
                type: "root",
                statements: []
              });
              for (var i = 0; i < statements.length; i++) {
                if (statements[i]) {
                  result.statements = result.statements.concat(statements[i]);
                }
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_external_statement() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_preprocessor_external_branch();
        if (result0 === null) {
          result0 = parse_external_declaration();
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, statement) { return statement; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse__();
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return ""; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_external_declaration() {
        var result0;
        
        result0 = parse_function_definition();
        if (result0 === null) {
          result0 = parse_global_declaration();
          if (result0 === null) {
            result0 = parse_preprocessor_define();
            if (result0 === null) {
              result0 = parse_preprocessor_operator();
              if (result0 === null) {
                result0 = parse_struct_definition();
                if (result0 === null) {
                  result0 = parse_macro_call();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_preprocessor_operator() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 5) === "undef") {
            result1 = "undef";
            advance(pos, 5);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"undef\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos.offset, 6) === "pragma") {
              result1 = "pragma";
              advance(pos, 6);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"pragma\"");
              }
            }
            if (result1 === null) {
              if (input.substr(pos.offset, 7) === "version") {
                result1 = "version";
                advance(pos, 7);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"version\"");
                }
              }
              if (result1 === null) {
                if (input.substr(pos.offset, 5) === "error") {
                  result1 = "error";
                  advance(pos, 5);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"error\"");
                  }
                }
                if (result1 === null) {
                  if (input.substr(pos.offset, 9) === "extension") {
                    result1 = "extension";
                    advance(pos, 9);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"extension\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.substr(pos.offset, 4) === "line") {
                      result1 = "line";
                      advance(pos, 4);
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"line\"");
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              pos2 = clone(pos);
              result3 = [];
              if (/^[^\n]/.test(input.charAt(pos.offset))) {
                result4 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n]");
                }
              }
              while (result4 !== null) {
                result3.push(result4);
                if (/^[^\n]/.test(input.charAt(pos.offset))) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\n]");
                  }
                }
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, defname) {return defname.join("")})(pos2.offset, pos2.line, pos2.column, result3);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              if (result3 !== null) {
                result4 = parse_newLine();
                if (result4 === null) {
                  result4 = parse_EOF();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, directive, value) {
            return new node({line:line,column:column,
              type: "preprocessor",
              directive: "#" + directive,
              value: value
            });
          })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_macro_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[A-Za-z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z_]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z_0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z_0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
             return new node({line:line,column:column,
               type: "identifier",
               name: head + tail.join("")
             });
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preprocessor_parameter_list() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 40) {
          result0 = "(";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_macro_identifier();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_comma();
            if (result3 !== null) {
              result4 = parse_macro_identifier();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_comma();
              if (result3 !== null) {
                result4 = parse_macro_identifier();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result3 = parse_right_paren();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
            if (!head) {
              return [];
            }
            return [ head ].concat(tail.map(function(item) { return item[1]; }));
          })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_macro_paren_parameter() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_left_paren();
        if (result0 !== null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          result1 = [];
          if (/^[^()]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^()]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^()]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^()]");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_macro_paren_parameter();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = [];
              if (/^[^()]/.test(input.charAt(pos.offset))) {
                result4 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[^()]");
                }
              }
              while (result4 !== null) {
                result3.push(result4);
                if (/^[^()]/.test(input.charAt(pos.offset))) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^()]");
                  }
                }
              }
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos3);
              }
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          if (result1 !== null) {
            result1 = (function(offset, line, column, head, paren, tail) {
              return head.join("") + paren + tail.join("");
            })(pos2.offset, pos2.line, pos2.column, result1[0], result1[1], result1[2]);
          }
          if (result1 === null) {
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result2 = parse_right_paren();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
            return "(" + value + ")";
          })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_macro_call_parameter() {
        var result0, result1;
        var pos0;
        
        result0 = parse_macro_paren_parameter();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = [];
          if (/^[^,)]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[^,)]");
            }
          }
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^,)]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^,)]");
              }
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, value) {
              return value.join("");
            })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_macro_call_parameter_list() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_macro_call_parameter();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_comma();
          if (result2 !== null) {
            result3 = parse_macro_call_parameter();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_comma();
            if (result2 !== null) {
              result3 = parse_macro_call_parameter();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
            return [head].concat(tail.map(function(item) { return item[1]; }));
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_macro_call() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_macro_identifier();
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_left_paren();
            if (result2 !== null) {
              result3 = parse_parameter_list();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result4 = ")";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, macro_name, parameters) {
              var result = new node({line:line,column:column,
                type: "macro_call",
                macro_name: macro_name,
                parameters: parameters
              });
              if (!parameters) {
                result.parameters = [];
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_macro_call_line() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_macro_call();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          if (/^[^\n]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\n]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^\n]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
            return {
              macro_call: head,
              rest_of_line: tail.join('')
            }
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preprocessor_define() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.substr(pos.offset, 6) === "define") {
              result2 = "define";
              advance(pos, 6);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"define\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_macro_identifier();
                if (result4 !== null) {
                  result5 = parse_preprocessor_parameter_list();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = [];
                    if (/^[ \t]/.test(input.charAt(pos.offset))) {
                      result7 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("[ \\t]");
                      }
                    }
                    while (result7 !== null) {
                      result6.push(result7);
                      if (/^[ \t]/.test(input.charAt(pos.offset))) {
                        result7 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("[ \\t]");
                        }
                      }
                    }
                    if (result6 !== null) {
                      pos2 = clone(pos);
                      result7 = [];
                      if (/^[^\n]/.test(input.charAt(pos.offset))) {
                        result8 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result8 = null;
                        if (reportFailures === 0) {
                          matchFailed("[^\\n]");
                        }
                      }
                      while (result8 !== null) {
                        result7.push(result8);
                        if (/^[^\n]/.test(input.charAt(pos.offset))) {
                          result8 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("[^\\n]");
                          }
                        }
                      }
                      if (result7 !== null) {
                        result7 = (function(offset, line, column, defname) {return defname.join("")})(pos2.offset, pos2.line, pos2.column, result7);
                      }
                      if (result7 === null) {
                        pos = clone(pos2);
                      }
                      if (result7 !== null) {
                        result8 = parse_newLine();
                        if (result8 === null) {
                          result8 = parse_EOF();
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier, parameters, token_string) {
            return new node({line:line,column:column,
                 type: "preprocessor",
                 directive: "#define",
                 identifier: identifier.name,
                 token_string: token_string,
                 parameters: parameters || null
               });
             })(pos0.offset, pos0.line, pos0.column, result0[4], result0[5], result0[7]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preprocessor_if() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.substr(pos.offset, 5) === "ifdef") {
              result2 = "ifdef";
              advance(pos, 5);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"ifdef\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 6) === "ifndef") {
                result2 = "ifndef";
                advance(pos, 6);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ifndef\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos.offset, 2) === "if") {
                  result2 = "if";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"if\"");
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                pos2 = clone(pos);
                result4 = [];
                if (/^[^\n]/.test(input.charAt(pos.offset))) {
                  result5 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\n]");
                  }
                }
                while (result5 !== null) {
                  result4.push(result5);
                  if (/^[^\n]/.test(input.charAt(pos.offset))) {
                    result5 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\\n]");
                    }
                  }
                }
                if (result4 !== null) {
                  result4 = (function(offset, line, column, defname) {return defname.join("")})(pos2.offset, pos2.line, pos2.column, result4);
                }
                if (result4 === null) {
                  pos = clone(pos2);
                }
                if (result4 !== null) {
                  result5 = parse_newLine();
                  if (result5 === null) {
                    result5 = parse_EOF();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, directive, value) {
               return new node({line:line,column:column,
                 type: "preprocessor",
                 directive: "#" + directive,
                 value: value
               });
             })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preprocessor_else_if() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "elif") {
              result2 = "elif";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"elif\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                pos2 = clone(pos);
                result4 = [];
                if (/^[^\n]/.test(input.charAt(pos.offset))) {
                  result5 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\n]");
                  }
                }
                while (result5 !== null) {
                  result4.push(result5);
                  if (/^[^\n]/.test(input.charAt(pos.offset))) {
                    result5 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\\n]");
                    }
                  }
                }
                if (result4 !== null) {
                  result4 = (function(offset, line, column, defname) {return defname.join("")})(pos2.offset, pos2.line, pos2.column, result4);
                }
                if (result4 === null) {
                  pos = clone(pos2);
                }
                if (result4 !== null) {
                  result5 = parse_newLine();
                  if (result5 === null) {
                    result5 = parse_EOF();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
              return new node({line:line,column:column,
                type: "preprocessor",
                directive: "#elif",
                value: value
              });
            })(pos0.offset, pos0.line, pos0.column, result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preprocessor_else() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "else") {
              result2 = "else";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"else\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_noNewlineWhitespace();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_newLine();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
            return new node({line:line,column:column,
              type: "preprocessor",
              directive: "#else"
            });
          })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preprocessor_end() {
        var result0, result1, result2, result3, result4, result5;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.substr(pos.offset, 5) === "endif") {
              result2 = "endif";
              advance(pos, 5);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"endif\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_noNewlineWhitespace();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_newLine();
                if (result4 === null) {
                  result4 = parse_EOF();
                }
                if (result4 !== null) {
                  result5 = parse__();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preprocessor_external_branch() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        result0 = parse_preprocessor_if();
        if (result0 !== null) {
          result1 = parse_external_statement_list();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_preprocessor_else_if();
          if (result2 !== null) {
            result3 = parse_external_statement_list();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_preprocessor_else_if();
            if (result2 !== null) {
              result3 = parse_external_statement_list();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_preprocessor_else();
            if (result2 !== null) {
              result3 = parse_external_statement_list();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_preprocessor_end();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, if_directive, elif_directive, else_directive) {
              return preprocessor_branch(if_directive, elif_directive, else_directive);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preprocessor_statement_branch() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        result0 = parse_preprocessor_if();
        if (result0 !== null) {
          result1 = parse_statement_list();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_preprocessor_else_if();
          if (result2 !== null) {
            result3 = parse_statement_list();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_preprocessor_else_if();
            if (result2 !== null) {
              result3 = parse_statement_list();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_preprocessor_else();
            if (result2 !== null) {
              result3 = parse_statement_list();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_preprocessor_end();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, if_directive, elif_directive, else_directive) {
              return preprocessor_branch(if_directive, elif_directive, else_directive);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_function_definition() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_function_prototype();
        if (result0 !== null) {
          result1 = parse_compound_statement();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, prototype, body) {
              result = new node({line:line,column:column,
                type: "function_declaration",
                name: prototype.name,
                returnType: prototype.returnType,
                parameters: prototype.parameters,
                body: body
              });
              return result;
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_compound_statement() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_left_brace();
        if (result0 !== null) {
          result1 = parse_statement_list();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_right_brace();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, statements) {
              result = new node({line:line,column:column,
                type: "scope",
                statements: []
              });
              if (statements && statements.statements) {
                result.statements = statements.statements;
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_statement_list() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          result2 = parse_statement_no_new_scope();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_statement_no_new_scope();
          }
          if (result1 !== null) {
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, list) {return {statements: list};})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_statement_no_new_scope() {
        var result0;
        
        result0 = parse_compound_statement();
        if (result0 === null) {
          result0 = parse_simple_statement();
          if (result0 === null) {
            result0 = parse_preprocessor_statement_branch();
          }
        }
        return result0;
      }
      
      function parse_statement_with_scope() {
        var result0;
        
        result0 = parse_compound_statement();
        if (result0 === null) {
          result0 = parse_simple_statement();
          if (result0 === null) {
            result0 = parse_preprocessor_statement_branch();
          }
        }
        return result0;
      }
      
      function parse_simple_statement() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_declaration();
        if (result0 === null) {
          result0 = parse_expression_statement();
          if (result0 === null) {
            result0 = parse_selection_statement();
            if (result0 === null) {
              result0 = parse_iteration_statement();
              if (result0 === null) {
                result0 = parse_jump_statement();
                if (result0 === null) {
                  result0 = parse_preprocessor_define();
                  if (result0 === null) {
                    result0 = parse_preprocessor_operator();
                    if (result0 === null) {
                      result0 = parse_macro_call();
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, statement) {
            return statement;
          })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_selection_statement() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "if") {
          result0 = "if";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"if\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_left_paren();
          if (result1 !== null) {
            result2 = parse_assignment_expression();
            if (result2 !== null) {
              result3 = parse_right_paren();
              if (result3 !== null) {
                result4 = parse_statement_with_scope();
                if (result4 !== null) {
                  pos2 = clone(pos);
                  if (input.substr(pos.offset, 4) === "else") {
                    result5 = "else";
                    advance(pos, 4);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"else\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse__();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_statement_with_scope();
                      if (result7 !== null) {
                        result5 = [result5, result6, result7];
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos2);
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, condition, if_body, else_body) {
               result = new node({line:line,column:column,
                 type:"if_statement",
                 condition:condition,
                 body:if_body
               });
               if (else_body) {
                 result.elseBody = else_body[2];
               }
               return result;
             })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_for_loop() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "for") {
          result0 = "for";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"for\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_left_paren();
          if (result1 !== null) {
            result2 = parse_expression_statement();
            if (result2 === null) {
              result2 = parse_declaration();
            }
            if (result2 !== null) {
              result3 = parse_condition();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_semicolon();
                if (result4 !== null) {
                  result5 = parse_assignment_expression();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_right_paren();
                    if (result6 !== null) {
                      result7 = parse_statement_no_new_scope();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, initializer, condition, increment, body) {
                return new node({line:line,column:column,
                  type:"for_statement",
                  initializer:initializer,
                  condition:condition,
                  increment:increment,
                  body:body
                });
              })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3], result0[5], result0[7]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_while_statement() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "while") {
          result0 = "while";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"while\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_left_paren();
          if (result1 !== null) {
            result2 = parse_condition();
            if (result2 !== null) {
              result3 = parse_right_paren();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, condition) {
               return {
                 condition:condition
               };
             })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_while_loop() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_while_statement();
        if (result0 !== null) {
          result1 = parse_statement_no_new_scope();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, w, body) {
              return new node({line:line,column:column,
                type: "while_statement",
                condition: w.condition,
                body: body
              });
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_do_while() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "do") {
          result0 = "do";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"do\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_statement_with_scope();
          if (result1 !== null) {
            result2 = parse_while_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, body, w) {
               return new node({line:line,column:column,
                 type: "do_statement",
                 condition: w.condition,
                 body: body
               });
             })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_iteration_statement() {
        var result0;
        
        result0 = parse_while_loop();
        if (result0 === null) {
          result0 = parse_do_while();
          if (result0 === null) {
            result0 = parse_for_loop();
          }
        }
        return result0;
      }
      
      function parse_jump_statement() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "return") {
          result0 = "return";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"return\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_assignment_expression();
          if (result1 !== null) {
            result2 = parse_semicolon();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, expression) {
              return new node({line:line,column:column,
                type: "return",
                value: expression
              });
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 8) === "continue") {
            result0 = "continue";
            advance(pos, 8);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"continue\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_semicolon();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 === null) {
            pos1 = clone(pos);
            if (input.substr(pos.offset, 5) === "break") {
              result0 = "break";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"break\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_semicolon();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 === null) {
              pos1 = clone(pos);
              if (input.substr(pos.offset, 6) === "return") {
                result0 = "return";
                advance(pos, 6);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"return\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_semicolon();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 === null) {
                pos1 = clone(pos);
                pos2 = clone(pos);
                pos3 = clone(pos);
                result0 = (function(offset, line, column) { return shaderType == "fs" })(pos.offset, pos.line, pos.column) ? "" : null;
                if (result0 !== null) {
                  if (input.substr(pos.offset, 7) === "discard") {
                    result1 = "discard";
                    advance(pos, 7);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"discard\"");
                    }
                  }
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos3);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column) {return "discard";})(pos2.offset, pos2.line, pos2.column);
                }
                if (result0 === null) {
                  pos = clone(pos2);
                }
                if (result0 !== null) {
                  result1 = parse_semicolon();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              }
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, type) {
                      return new node({line:line,column:column,
                        type:type[0]
                      });
                    })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_expression_statement() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_assignment_expression();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_semicolon();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e) {
              return new node({line:line,column:column,
                type: "expression",
                expression: e
              });
          })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_declaration() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_function_prototype();
        if (result0 !== null) {
          result1 = parse_semicolon();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, function_prototype) {
              return function_prototype;
            })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_locally_specified_type();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_init_declarator_list();
              if (result2 !== null) {
                result3 = parse_semicolon();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, type, declarators) {
                return new node({line:line,column:column,
                  type: "declarator",
                  typeAttribute: type,
                  declarators: declarators
                });
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = (function(offset, line, column) { return shaderType == "vs"; })(pos.offset, pos.line, pos.column) ? "" : null;
            if (result0 !== null) {
              if (input.substr(pos.offset, 9) === "invariant") {
                result1 = "invariant";
                advance(pos, 9);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"invariant\"");
                }
              }
              if (result1 !== null) {
                result2 = parse__();
                if (result2 !== null) {
                  result3 = parse_identifier();
                  if (result3 !== null) {
                    result4 = [];
                    pos2 = clone(pos);
                    result5 = parse_comma();
                    if (result5 !== null) {
                      result6 = parse_identifier();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                    while (result5 !== null) {
                      result4.push(result5);
                      pos2 = clone(pos);
                      result5 = parse_comma();
                      if (result5 !== null) {
                        result6 = parse_identifier();
                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse_semicolon();
                      if (result5 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                    var items = [ head ].concat(tail.map(function(item) {
                      return item[1]; }));
                    return new node({line:line,column:column,
                      type: "invariant",
                      identifiers: items
                    });
                  })(pos0.offset, pos0.line, pos0.column, result0[3], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 9) === "precision") {
                result0 = "precision";
                advance(pos, 9);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"precision\"");
                }
              }
              if (result0 !== null) {
                result1 = parse__();
                if (result1 !== null) {
                  result2 = parse_precision_qualifier();
                  if (result2 !== null) {
                    result3 = parse__();
                    if (result3 !== null) {
                      result4 = parse_type_name();
                      if (result4 !== null) {
                        result5 = parse_semicolon();
                        if (result5 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, precission, type) {
                    return new node({line:line,column:column,
                      type:"precision",
                      precision: precission,
                      typeName: type
                    });
                  })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("declaration");
        }
        return result0;
      }
      
      function parse_global_declaration() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        result0 = parse_declaration();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_fully_specified_type();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_init_declarator_list();
              if (result2 !== null) {
                result3 = parse_semicolon();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, type, declarators) {
              return new node({line:line,column:column,
                type: "declarator",
                typeAttribute: type,
                declarators: declarators
              });
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_attribute_type();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                result2 = parse_declarator_list_no_array();
                if (result2 !== null) {
                  result3 = parse_semicolon();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, type, declarators) {
                return new node({line:line,column:column,
                  type: "declarator",
                  typeAttribute: type,
                  declarators: declarators
                });
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_function_prototype_parameter_list() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        if (input.substr(pos.offset, 4) === "void") {
          result0 = "void";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"void\"");
          }
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_parameter_declaration();
          if (result0 !== null) {
            result1 = [];
            pos2 = clone(pos);
            result2 = parse_comma();
            if (result2 !== null) {
              result3 = parse_parameter_declaration();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            while (result2 !== null) {
              result1.push(result2);
              pos2 = clone(pos);
              result2 = parse_comma();
              if (result2 !== null) {
                result3 = parse_parameter_declaration();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, head, tail) {
                return [ head ].concat(tail.map(function(item) { return item[1]; }));
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_function_prototype() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_void_type();
        if (result0 === null) {
          result0 = parse_precision_type();
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result3 = parse_left_paren();
              if (result3 !== null) {
                result4 = parse_function_prototype_parameter_list();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_right_paren();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, type, identifier, parameters) {
              result = new node({line:line,column:column,
                type:"function_prototype",
                name: identifier.name,
                returnType: type,
                parameters: parameters
              });
              if (parameters == "void" || !parameters) {
                result.parameters = [];
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_parameter_qualifier() {
        var result0;
        
        if (input.substr(pos.offset, 5) === "inout") {
          result0 = "inout";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"inout\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "in") {
            result0 = "in";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"in\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 3) === "out") {
              result0 = "out";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"out\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_parameter_declaration() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        result0 = parse_const_qualifier();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_parameter_qualifier();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_precision_qualifier();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_type_name();
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_identifier();
                  if (result5 !== null) {
                    pos2 = clone(pos);
                    result6 = parse_left_bracket();
                    if (result6 !== null) {
                      result7 = parse_conditional_expression();
                      if (result7 !== null) {
                        result8 = parse_right_bracket();
                        if (result8 !== null) {
                          result6 = [result6, result7, result8];
                        } else {
                          result6 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos2);
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, const_qualifier, parameter, precision, type_name, identifier, array_size) {
            var result = new node({line:line,column:column,
              type: "parameter",
              type_name: type_name,
              name: identifier.name
            });
            if (const_qualifier) result.typeQualifier = const_qualifier[0];
            if (parameter) result.parameterQualifier = parameter[0];
            if (precision) result.precision = precision[0];
            if (array_size) result.arraySize = array_size[1];
            // "const" is only legal on "in" parameter qualifiers.
            if (result.typeQualifier &&
                result.parameterQualifier &&
                result.parameterQualifier != "in") {
              return null;
            } else {
              return result;
            }
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_init_declarator_list() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_init_declarator();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_comma();
          if (result2 !== null) {
            result3 = parse_init_declarator();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_comma();
            if (result2 !== null) {
              result3 = parse_init_declarator();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
            return [ head ].concat(tail.map(function(item) { return item[1]; }));
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_declarator_list() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_declarator();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_comma();
          if (result2 !== null) {
            result3 = parse_declarator();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_comma();
            if (result2 !== null) {
              result3 = parse_declarator();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
            return [ head ].concat(tail.map(function(item) { return item[1]; }));
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_declarator_list_no_array() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_declarator_no_array();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_comma();
          if (result2 !== null) {
            result3 = parse_declarator_no_array();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_comma();
            if (result2 !== null) {
              result3 = parse_declarator_no_array();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
            return [ head ].concat(tail.map(function(item) { return item[1]; }));
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_declarator_list_arrays_have_size() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_declarator_array_with_size();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_comma();
          if (result2 !== null) {
            result3 = parse_declarator_array_with_size();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_comma();
            if (result2 !== null) {
              result3 = parse_declarator_array_with_size();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
            return [ head ].concat(tail.map(function(item) { return item[1]; }));
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_declarator_no_array() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
              return new node({line:line,column:column,
                type: "declarator_item",
                name:name
              });
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_declarator_array_with_size() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          result1 = parse_left_bracket();
          if (result1 !== null) {
            result2 = parse_conditional_expression();
            if (result2 !== null) {
              result3 = parse_right_bracket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, arraySize) {
              return new node({line:line,column:column,
                type: "declarator_item",
                name: name,
                arraySize: arraySize,
                isArray: true
              });
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_declarator_no_array();
        }
        return result0;
      }
      
      function parse_declarator() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          result1 = parse_left_bracket();
          if (result1 !== null) {
            result2 = parse_right_bracket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
              return new node({line:line,column:column,
                type: "declarator_item",
                name: name,
                isArray: true
              });
            })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_declarator_array_with_size();
        }
        return result0;
      }
      
      function parse_init_declarator() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          result1 = parse_equals();
          if (result1 !== null) {
            result2 = parse_conditional_expression();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, initializer) {
              return new node({line:line,column:column,
                type: "declarator_item",
                name: name,
                initializer:initializer
              });
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_declarator();
        }
        return result0;
      }
      
      function parse_member_list() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result1 = parse_locally_specified_type();
        if (result1 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result3 = parse_declarator_list_arrays_have_size();
            if (result3 !== null) {
              result4 = parse_semicolon();
              if (result4 !== null) {
                result1 = [result1, result2, result3, result4];
              } else {
                result1 = null;
                pos = clone(pos1);
              }
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          } else {
            result1 = null;
            pos = clone(pos1);
          }
        } else {
          result1 = null;
          pos = clone(pos1);
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = clone(pos);
            result1 = parse_locally_specified_type();
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result3 = parse_declarator_list_arrays_have_size();
                if (result3 !== null) {
                  result4 = parse_semicolon();
                  if (result4 !== null) {
                    result1 = [result1, result2, result3, result4];
                  } else {
                    result1 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result1 = null;
                  pos = clone(pos1);
                }
              } else {
                result1 = null;
                pos = clone(pos1);
              }
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, declarators) {
             return declarators.map(function(item) {
               return new node({line:line,column:column,
                 type: "declarator",
                 typeAttribute: item[0],
                 declarators: item[2]
               })
              });
          })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_struct_definition() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        result0 = parse_type_qualifier();
        if (result0 === null) {
          result0 = parse_attribute_qualifier();
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.substr(pos.offset, 6) === "struct") {
            result1 = "struct";
            advance(pos, 6);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"struct\"");
            }
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_identifier();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_left_brace();
              if (result3 !== null) {
                result4 = parse_member_list();
                if (result4 !== null) {
                  result5 = parse_right_brace();
                  if (result5 !== null) {
                    result6 = parse_declarator_list();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_semicolon();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, qualifier, identifier, members, declarators) {
              var result = new node({line:line,column:column,
                type: "struct_definition",
                members:members
              });
              if (qualifier) {
                result.qualifier = qualifier[0];
              }
              if (identifier) {
                result.name = identifier[1].name;
                typeNames[result.name] = result;
              }
              if (declarators) {
                result.declarators = declarators;
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_precision_type() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        result0 = parse_precision_qualifier();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_type_name();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, precision, name) {
            var result = new node({line:line,column:column,
              type: "type",
              name: name
            });
            if (precision) result.precision = precision[0];
            return result;
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_locally_specified_type() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        result0 = parse_const_qualifier();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_precision_type();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, qualifier, type) {
            var result = type;
            if (qualifier) result.qualifier = qualifier[0];
            return result;
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("locally specified type");
        }
        return result0;
      }
      
      function parse_attribute_qualifier() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) { return shaderType == "vs"; })(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 9) === "attribute") {
            result1 = "attribute";
            advance(pos, 9);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"attribute\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
            return "attribute";
          })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_attribute_type() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_attribute_qualifier();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_precision_type();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, qualifier, type) {
            var result = type;
            result.qualifier = qualifier;
            return result;
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("locally specified type");
        }
        return result0;
      }
      
      function parse_fully_specified_type() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        result0 = parse_type_qualifier();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_precision_type();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, qualifier, type) {
            var result = type;
            if (qualifier) result.qualifier = qualifier[0];
            return result;
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("fully specified type");
        }
        return result0;
      }
      
      function parse_precision_qualifier() {
        var result0;
        
        reportFailures++;
        if (input.substr(pos.offset, 5) === "highp") {
          result0 = "highp";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"highp\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 7) === "mediump") {
            result0 = "mediump";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"mediump\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 4) === "lowp") {
              result0 = "lowp";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"lowp\"");
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("precision qualifier");
        }
        return result0;
      }
      
      function parse_const_qualifier() {
        var result0;
        
        if (input.substr(pos.offset, 5) === "const") {
          result0 = "const";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"const\"");
          }
        }
        return result0;
      }
      
      function parse_type_qualifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        result0 = parse_const_qualifier();
        if (result0 === null) {
          if (input.substr(pos.offset, 7) === "varying") {
            result0 = "varying";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"varying\"");
            }
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 9) === "invariant") {
              result0 = "invariant";
              advance(pos, 9);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"invariant\"");
              }
            }
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                if (input.substr(pos.offset, 7) === "varying") {
                  result2 = "varying";
                  advance(pos, 7);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"varying\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "invariant varying"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 7) === "uniform") {
                result0 = "uniform";
                advance(pos, 7);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"uniform\"");
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("type qualifier");
        }
        return result0;
      }
      
      function parse_void_type() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "void") {
          result0 = "void";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"void\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
            return new node({line:line,column:column,
              type: "type",
              name: "void"
            })
          })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("void");
        }
        return result0;
      }
      
      function parse_type_name() {
        var result0;
        var pos0;
        
        reportFailures++;
        if (input.substr(pos.offset, 5) === "float") {
          result0 = "float";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"float\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 3) === "int") {
            result0 = "int";
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"int\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 4) === "bool") {
              result0 = "bool";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"bool\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 9) === "sampler2D") {
                result0 = "sampler2D";
                advance(pos, 9);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"sampler2D\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 11) === "samplerCube") {
                  result0 = "samplerCube";
                  advance(pos, 11);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"samplerCube\"");
                  }
                }
                if (result0 === null) {
                  result0 = parse_vector();
                  if (result0 === null) {
                    result0 = parse_matrix();
                    if (result0 === null) {
                      pos0 = clone(pos);
                      result0 = parse_identifier();
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, name) {
                            if (name.name in typeNames) {
                               return name.name;
                            } else {
                              return null;
                            }
                          })(pos0.offset, pos0.line, pos0.column, result0);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("type name");
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        pos3 = clone(pos);
        result0 = parse_keyword();
        if (result0 !== null) {
          if (/^[^A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[^A-Za-z_0-9]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos3);
          }
        } else {
          result0 = null;
          pos = clone(pos3);
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          if (/^[A-Za-z_]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z_]");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z_0-9]");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[A-Za-z_0-9]");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
             return new node({line:line,column:column,
               type: "identifier",
               name: head + tail.join("")
             });
          })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identifier");
        }
        return result0;
      }
      
      function parse_keyword() {
        var result0;
        
        reportFailures++;
        if (input.substr(pos.offset, 9) === "attribute") {
          result0 = "attribute";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"attribute\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 5) === "const") {
            result0 = "const";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"const\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 4) === "bool") {
              result0 = "bool";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"bool\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 5) === "float") {
                result0 = "float";
                advance(pos, 5);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"float\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 3) === "int") {
                  result0 = "int";
                  advance(pos, 3);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"int\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 5) === "break") {
                    result0 = "break";
                    advance(pos, 5);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"break\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 8) === "continue") {
                      result0 = "continue";
                      advance(pos, 8);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"continue\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 2) === "do") {
                        result0 = "do";
                        advance(pos, 2);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"do\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 4) === "else") {
                          result0 = "else";
                          advance(pos, 4);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"else\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 3) === "for") {
                            result0 = "for";
                            advance(pos, 3);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"for\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 2) === "if") {
                              result0 = "if";
                              advance(pos, 2);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"if\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 7) === "discard") {
                                result0 = "discard";
                                advance(pos, 7);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"discard\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 6) === "return") {
                                  result0 = "return";
                                  advance(pos, 6);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"return\"");
                                  }
                                }
                                if (result0 === null) {
                                  result0 = parse_vector();
                                  if (result0 === null) {
                                    result0 = parse_matrix();
                                    if (result0 === null) {
                                      if (input.substr(pos.offset, 2) === "in") {
                                        result0 = "in";
                                        advance(pos, 2);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"in\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos.offset, 3) === "out") {
                                          result0 = "out";
                                          advance(pos, 3);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"out\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos.offset, 5) === "inout") {
                                            result0 = "inout";
                                            advance(pos, 5);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"inout\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos.offset, 7) === "uniform") {
                                              result0 = "uniform";
                                              advance(pos, 7);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"uniform\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos.offset, 7) === "varying") {
                                                result0 = "varying";
                                                advance(pos, 7);
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"varying\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.substr(pos.offset, 9) === "sampler2D") {
                                                  result0 = "sampler2D";
                                                  advance(pos, 9);
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"sampler2D\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.substr(pos.offset, 11) === "samplerCube") {
                                                    result0 = "samplerCube";
                                                    advance(pos, 11);
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"samplerCube\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.substr(pos.offset, 6) === "struct") {
                                                      result0 = "struct";
                                                      advance(pos, 6);
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"struct\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.substr(pos.offset, 4) === "void") {
                                                        result0 = "void";
                                                        advance(pos, 4);
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"void\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.substr(pos.offset, 5) === "while") {
                                                          result0 = "while";
                                                          advance(pos, 5);
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"while\"");
                                                          }
                                                        }
                                                        if (result0 === null) {
                                                          if (input.substr(pos.offset, 5) === "highp") {
                                                            result0 = "highp";
                                                            advance(pos, 5);
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"highp\"");
                                                            }
                                                          }
                                                          if (result0 === null) {
                                                            if (input.substr(pos.offset, 7) === "mediump") {
                                                              result0 = "mediump";
                                                              advance(pos, 7);
                                                            } else {
                                                              result0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"mediump\"");
                                                              }
                                                            }
                                                            if (result0 === null) {
                                                              if (input.substr(pos.offset, 4) === "lowp") {
                                                                result0 = "lowp";
                                                                advance(pos, 4);
                                                              } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"lowp\"");
                                                                }
                                                              }
                                                              if (result0 === null) {
                                                                if (input.substr(pos.offset, 4) === "true") {
                                                                  result0 = "true";
                                                                  advance(pos, 4);
                                                                } else {
                                                                  result0 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("\"true\"");
                                                                  }
                                                                }
                                                                if (result0 === null) {
                                                                  if (input.substr(pos.offset, 5) === "false") {
                                                                    result0 = "false";
                                                                    advance(pos, 5);
                                                                  } else {
                                                                    result0 = null;
                                                                    if (reportFailures === 0) {
                                                                      matchFailed("\"false\"");
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("keyword");
        }
        return result0;
      }
      
      function parse_vector() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[bi]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[bi]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.substr(pos.offset, 3) === "vec") {
            result1 = "vec";
            advance(pos, 3);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"vec\"");
            }
          }
          if (result1 !== null) {
            if (/^[234]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[234]");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) { return a.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_matrix() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "mat") {
          result0 = "mat";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"mat\"");
          }
        }
        if (result0 !== null) {
          if (/^[234]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[234]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) { return a.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_reserved() {
        var result0, result1, result2, result3;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_single_underscore_identifier();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_single_underscore_identifier();
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "__") {
            result1 = "__";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"__\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z_0-9]");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[A-Za-z_0-9]");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("reserved name");
        }
        return result0;
      }
      
      function parse_single_underscore_identifier() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        if (/^[A-Za-z0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[A-Za-z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9]");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 95) {
            result1 = "_";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"_\"");
            }
          }
          if (result1 !== null) {
            if (/^[A-Za-z0-9]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[A-Za-z0-9]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[A-Za-z0-9]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_int_constant() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[1-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return new node({line:line,column:column,
                type: "int",
                value: parseInt([head].concat(tail).join(""), 10)
              });
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 48) {
            result0 = "0";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"0\"");
            }
          }
          if (result0 !== null) {
            if (/^[Xx]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[Xx]");
              }
            }
            if (result1 !== null) {
              if (/^[0-9A-Fa-f]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9A-Fa-f]");
                }
              }
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  if (/^[0-9A-Fa-f]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9A-Fa-f]");
                    }
                  }
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, digits) {
                return new node({line:line,column:column,
                  type:"int",
                  value:parseInt(digits.join(""), 16)
                });
              })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 48) {
              result0 = "0";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            if (result0 !== null) {
              if (/^[0-7]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-7]");
                }
              }
              if (result2 !== null) {
                result1 = [];
                while (result2 !== null) {
                  result1.push(result2);
                  if (/^[0-7]/.test(input.charAt(pos.offset))) {
                    result2 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-7]");
                    }
                  }
                }
              } else {
                result1 = null;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, digits) {
                  return new node({line:line,column:column,
                    type:"int",
                    value:parseInt(digits.join(""), 8)
                  });
                })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              if (input.charCodeAt(pos.offset) === 48) {
                result0 = "0";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column) {
                    return new node({line:line,column:column,
                      type: "int",
                      value: 0
                    });
                  })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_float_constant() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_float_exponent();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 === null) {
          pos1 = clone(pos);
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result1 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result1 = ".";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result1 !== null) {
              result2 = [];
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              while (result3 !== null) {
                result2.push(result3);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
              if (result2 !== null) {
                result3 = parse_float_exponent();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) {
              digits[0] = digits[0].join("");
              digits[2] = digits[2].join("");
              return new node({line:line,column:column,
                type: "float",
                value:parseFloat(digits.join(""))
              });
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result1 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_float_exponent();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, digits) {
                return new node({line:line,column:column,
                  type: "float",
                  value: parseFloat(digits[0].join("") + digits[1])
                });
            })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_float_exponent() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[Ee]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Ee]");
          }
        }
        if (result0 !== null) {
          if (/^[+\-]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[+\\-]");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, sign, exponent) {
              return ["e", sign].concat(exponent).join("");
           })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_paren_expression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_left_paren();
        if (result0 !== null) {
          result1 = parse_assignment_expression();
          if (result1 !== null) {
            result2 = parse_right_paren();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, expression) {
              return expression;
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bool_constant() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 5) === "false") {
            result0 = "false";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
            return new node({line:line,column:column,
              type: "bool",
              value: value == "true"
            });
          })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_primary_expression() {
        var result0;
        
        result0 = parse_function_call();
        if (result0 === null) {
          result0 = parse_identifier();
          if (result0 === null) {
            result0 = parse_float_constant();
            if (result0 === null) {
              result0 = parse_int_constant();
              if (result0 === null) {
                result0 = parse_bool_constant();
                if (result0 === null) {
                  result0 = parse_paren_expression();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_index_accessor() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_left_bracket();
        if (result0 !== null) {
          result1 = parse_assignment_expression();
          if (result1 !== null) {
            result2 = parse_right_bracket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, index) {
            return new node({line:line,column:column,
              type: "accessor",
              index: index
            });
          })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_field_selector() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_identifier();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
            return new node({line:line,column:column,
              type: "field_selector",
              selection: id.name
            })
          })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postfix_expression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_primary_expression();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_field_selector();
          if (result2 === null) {
            result2 = parse_index_accessor();
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_field_selector();
            if (result2 === null) {
              result2 = parse_index_accessor();
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                result = new node({line:line,column:column,
                  type: "postfix",
                  operator: tail[i],
                  expression: result
                })
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postfix_expression_no_repeat() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_postfix_expression();
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "++") {
              result2 = "++";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"++\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "--") {
                result2 = "--";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"--\"");
                }
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = [];
              result4 = parse_field_selector();
              if (result4 === null) {
                result4 = parse_index_accessor();
              }
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_field_selector();
                if (result4 === null) {
                  result4 = parse_index_accessor();
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail, rest) {
              var result = head;
              if(tail) {
                result = new node({line:line,column:column,
                  type: "postfix",
                  operator: new node({line:line,column:column,
                    id: next_id++,
                    type: "operator",
                    operator: tail
                  }),
                  expression: result
                })
              }
              for (var i = 0; i < rest.length; i++) {
                result = new node({line:line,column:column,
                  type: "postfix",
                  operator: rest[i],
                  expression: result
                })
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_parameter_list() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "void") {
          result0 = "void";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"void\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return []; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_assignment_expression();
          if (result0 !== null) {
            result1 = [];
            pos2 = clone(pos);
            result2 = parse_comma();
            if (result2 !== null) {
              result3 = parse_assignment_expression();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            while (result2 !== null) {
              result1.push(result2);
              pos2 = clone(pos);
              result2 = parse_comma();
              if (result2 !== null) {
                result3 = parse_assignment_expression();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, head, tail) {
                return [ head ].concat(tail.map(function(item) { return item[1] }));
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_function_call() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_function_identifier();
        if (result0 !== null) {
          result1 = parse_left_paren();
          if (result1 !== null) {
            result2 = parse_parameter_list();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_right_paren();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, function_name, parameters) {
              var result = new node({line:line,column:column,
                type: "function_call",
                function_name: function_name,
                parameters: parameters
              });
              if (!parameters) {
                result.parameters = [];
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_function_identifier() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {return id.name;})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_type_name();
        }
        return result0;
      }
      
      function parse_unary_expression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "++") {
          result0 = "++";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"++\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "--") {
            result0 = "--";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"--\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 33) {
              result0 = "!";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"!\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 126) {
                result0 = "~";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"~\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 43) {
                  result0 = "+";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"+\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 45) {
                    result0 = "-";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }
                }
              }
            }
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_postfix_expression_no_repeat();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              result = tail
              if (head) {
                result = new node({line:line,column:column,
                  type: "unary",
                  expression: result,
                  operator: new node({line:line,column:column,
                    type: "operator",
                    operator: head
                  })
                });
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_multiplicative_operator() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 42) {
          result0 = "*";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 47) {
            result0 = "/";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 37) {
              result0 = "%";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, operator) {
            return new node({line:line,column:column,
              type: "operator",
              operator: operator
            });
          })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_multiplicative_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_unary_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_multiplicative_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_unary_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_multiplicative_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_unary_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_additive_operator() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 43) {
          result0 = "+";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 43) {
            result1 = "+";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"+\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 61) {
              result1 = "=";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
            return new node({line:line,column:column,
              type: "operator",
              operator: "+"
            });
          })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 45) {
            result0 = "-";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 45) {
              result1 = "-";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos.offset) === 61) {
                result1 = "=";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = clone(pos2);
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {
              return new node({line:line,column:column,
                type: "operator",
                operator: "-"
              });
            })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_additive_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_multiplicative_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_additive_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_multiplicative_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_additive_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_multiplicative_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_shift_operator() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "<<") {
          result0 = "<<";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<<\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === ">>") {
            result0 = ">>";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\">>\"");
            }
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, operator) {
            return new node({line:line,column:column,
              type: "operator",
              operator: operator
            });
          })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_shift_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_additive_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_shift_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_additive_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_shift_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_additive_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_relational_operator() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 60) {
            result1 = "<";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 61) {
              result2 = "=";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, equal) {
            return new node({line:line,column:column,
              type: "operator",
              operator: "<" + equal
            });
          })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 62) {
            result0 = ">";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          if (result0 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 62) {
              result1 = ">";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = clone(pos2);
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 61) {
                result2 = "=";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, equal) {
              return new node({line:line,column:column,
                type: "operator",
                operator: ">" + equal
              });
            })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_relational_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_shift_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_relational_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_shift_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_relational_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_shift_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_equality_operator() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "==") {
          result0 = "==";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"==\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "!=") {
            result0 = "!=";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"!=\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, operator) {
             return new node({line:line,column:column,
               type: "operator",
               operator: operator
             });
           })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_equality_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_relational_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_equality_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_relational_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_equality_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_relational_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwise_and_operator() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 38) {
          result0 = "&";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 38) {
              result1 = "&";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"&\"");
              }
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
             return new node({line:line,column:column,
               type: "operator",
               operator: "&"
             });
           })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwise_and_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_equality_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_bitwise_and_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_equality_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_bitwise_and_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_equality_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwise_xor_operator() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 94) {
          result0 = "^";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"^\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 94) {
              result1 = "^";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"^\"");
              }
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
             return new node({line:line,column:column,
               type: "operator",
               operator: "^"
             });
           })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwise_xor_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_bitwise_and_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_bitwise_xor_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_bitwise_and_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_bitwise_xor_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_bitwise_and_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwise_or_operator() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 124) {
          result0 = "|";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"|\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 124) {
              result1 = "|";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"|\"");
              }
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
             return new node({line:line,column:column,
               type: "operator",
               operator: "|"
             });
           })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwise_or_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_bitwise_xor_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_bitwise_or_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_bitwise_xor_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_bitwise_or_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_bitwise_xor_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_logical_and_operator() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "&&") {
          result0 = "&&";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&&\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
             return new node({line:line,column:column,
               type: "operator",
               operator: "&&"
             });
           })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_logical_and_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_bitwise_or_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_logical_and_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_bitwise_or_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_logical_and_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_bitwise_or_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_logical_xor_operator() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "^^") {
          result0 = "^^";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"^^\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
             return new node({line:line,column:column,
               type: "operator",
               operator: "^^"
             });
           })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_logical_xor_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_logical_and_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_logical_xor_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_logical_and_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_logical_xor_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_logical_and_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_logical_or_operator() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "||") {
          result0 = "||";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"||\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
             return new node({line:line,column:column,
               type: "operator",
               operator: "||"
             });
           })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_logical_or_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_logical_xor_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_logical_or_operator();
            if (result3 !== null) {
              result4 = parse__();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_logical_xor_expression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_logical_or_operator();
              if (result3 !== null) {
                result4 = parse__();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_logical_xor_expression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              return daisy_chain(head, tail, line, column);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_conditional_expression() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_logical_or_expression();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 63) {
              result2 = "?";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_assignment_expression();
                if (result4 !== null) {
                  result5 = parse__();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 58) {
                      result6 = ":";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse__();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = parse_assignment_expression();
                        if (result8 !== null) {
                          result1 = [result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result1 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result1 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result1 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result1 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              result = head;
              if (tail) {
                result = new node({line:line,column:column,
                  type: "ternary",
                  condition: head,
                  is_true: tail[3],
                  is_false: tail[7]
                })
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_assignment_expression() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_conditional_expression();
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 61) {
              result2 = "=";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "*=") {
                result2 = "*=";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*=\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos.offset, 2) === "/=") {
                  result2 = "/=";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/=\"");
                  }
                }
                if (result2 === null) {
                  if (input.substr(pos.offset, 2) === "%=") {
                    result2 = "%=";
                    advance(pos, 2);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"%=\"");
                    }
                  }
                  if (result2 === null) {
                    if (input.substr(pos.offset, 2) === "+=") {
                      result2 = "+=";
                      advance(pos, 2);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"+=\"");
                      }
                    }
                    if (result2 === null) {
                      if (input.substr(pos.offset, 2) === "-=") {
                        result2 = "-=";
                        advance(pos, 2);
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"-=\"");
                        }
                      }
                      if (result2 === null) {
                        if (input.substr(pos.offset, 3) === "<<=") {
                          result2 = "<<=";
                          advance(pos, 3);
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"<<=\"");
                          }
                        }
                        if (result2 === null) {
                          if (input.substr(pos.offset, 3) === ">>=") {
                            result2 = ">>=";
                            advance(pos, 3);
                          } else {
                            result2 = null;
                            if (reportFailures === 0) {
                              matchFailed("\">>=\"");
                            }
                          }
                          if (result2 === null) {
                            if (input.substr(pos.offset, 2) === "&=") {
                              result2 = "&=";
                              advance(pos, 2);
                            } else {
                              result2 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"&=\"");
                              }
                            }
                            if (result2 === null) {
                              if (input.substr(pos.offset, 2) === "^=") {
                                result2 = "^=";
                                advance(pos, 2);
                              } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"^=\"");
                                }
                              }
                              if (result2 === null) {
                                if (input.substr(pos.offset, 2) === "|=") {
                                  result2 = "|=";
                                  advance(pos, 2);
                                } else {
                                  result2 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"|=\"");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_assignment_expression();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, variable, operator, expression) {
              return new node({line:line,column:column,
                type: "binary",
                operator: new node({line:line,column:column,
                  type: "operator",
                  operator: operator
                }),
                left: variable,
                right: expression
              });
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_conditional_expression();
        }
        return result0;
      }
      
      function parse_condition() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_locally_specified_type();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result3 = parse__();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse__();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_assignment_expression();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_assignment_expression();
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
        // Map containing the names of structs defined in the shader mapped to "true".
        var typeNames = { };
      
        // Ideintifer for each node.
        var next_id = 0;
      
        // The type of shader being parsed.  This sould be set before parsing begins.
        // This allows us to reject invalid constructs such as attribute declaration
        // in a fragment shader or discard ina vertex shader.
        var shaderType = "vs";
      
        /** @constructor */
        function node(extraProperties) {
          this.id = next_id++;
          for (var prop in extraProperties) {
              if (extraProperties.hasOwnProperty(prop)) {
                this[prop] = extraProperties[prop];
              }
          }
        };
      
        // Helper function to daisy chain together a series of binary operations.
        function daisy_chain(head, tail, line, column) {
          var result = head;
          for (var i = 0; i < tail.length; i++) {
            result = new node({line:line,column:column,
              type: "binary",
              operator: tail[i][1],
              left: result,
              right: tail[i][3]
            });
          }
          return result;
        };
      
        // Generates AST Nodes for a preprocessor branch.
        function preprocessor_branch(if_directive,
                                     elif_directives,
                                     else_directive) {
          var elseList = elif_directives;
          if (else_directive) {
            elseList = elseList.concat([else_directive]);
          }
          var result = if_directive[0];
          result.guarded_statements = if_directive[1].statements;
          var current_branch = result;
          for (var i = 0; i < elseList.length; i++) {
            current_branch.elseBody = elseList[i][0];
            current_branch.elseBody.guarded_statements =
              elseList[i][1].statements;
            current_branch = current_branch.elseBody;
          }
          return result;
        };
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();