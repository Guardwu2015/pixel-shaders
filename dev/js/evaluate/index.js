// Generated by CoffeeScript 1.4.0
(function() {
  var XRegExp, errorValue, evalInContext, hasIntegers;

  XRegExp = require("xregexp").XRegExp;

  evalInContext = (function() {
    var abs, ceil, clamp, cos, exp, floor, fract, max, min, mod, pow, sin, smoothstep, sqrt, step, tan;
    abs = Math.abs;
    mod = function(x, y) {
      return x - y * Math.floor(x / y);
    };
    floor = Math.floor;
    ceil = Math.ceil;
    sin = Math.sin;
    cos = Math.cos;
    tan = Math.tan;
    min = Math.min;
    max = Math.max;
    clamp = function(x, minVal, maxVal) {
      return min(max(x, minVal), maxVal);
    };
    exp = Math.exp;
    pow = Math.pow;
    sqrt = Math.sqrt;
    fract = function(x) {
      return x - floor(x);
    };
    step = function(edge, x) {
      if (x < edge) {
        return 0;
      } else {
        return 1;
      }
    };
    smoothstep = function(edge0, edge1, x) {
      var t;
      t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
      return t * t * (3.0 - 2.0 * t);
    };
    return function(s) {
      return eval(s);
    };
  })();

  hasIntegers = function(s) {
    var ret;
    ret = false;
    XRegExp.forEach(s, /([0-9]*\.[0-9]*)|[0-9]+/, function(match) {
      var number;
      number = match[0];
      if (number.indexOf(".") === -1) {
        return ret = true;
      }
    });
    return ret;
  };

  errorValue = {
    err: true
  };

  module.exports = {
    functionOfX: function(s) {
      var f;
      if (hasIntegers(s)) {
        return errorValue;
      }
      try {
        f = evalInContext("(function (x) {return " + s + ";})");
        f(0);
      } catch (e) {
        return errorValue;
      }
      return f;
    }
  };

}).call(this);
