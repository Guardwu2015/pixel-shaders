// Generated by CoffeeScript 1.4.0
(function() {
  var $, Tip, fragmentShaderSource, fragmentShaderSource2, mandelbrot, pz, shader, tip, tt, vertexShaderSource;

  $ = require('jquery');

  tt = $("#tt");

  Tip = require('tip');

  tip = new Tip(tt);

  tip.attach('#mylink');

  setInterval(function() {
    return tt.text(Math.random());
  }, 1000);

  vertexShaderSource = "precision mediump float;\n\nattribute vec3 vertexPosition;\nvarying vec2 position;\nuniform vec2 boundsMin;\nuniform vec2 boundsMax;\n\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1.0);\n  position = mix(boundsMin, boundsMax, (vertexPosition.xy + 1.0) * 0.5);\n}";

  fragmentShaderSource = "precision mediump float;\n\nvarying vec2 position;\n\nvoid main() {\n  gl_FragColor = vec4(position.x, position.y, 0., 1.);\n}";

  fragmentShaderSource2 = "precision mediump float;\n\nvarying vec2 position;\nuniform sampler2D img;\n\nvoid main() {\n  gl_FragColor = texture2D(img, position);\n}";

  mandelbrot = "precision mediump float;\n\nvarying vec2 position;\n\nvoid main() {\n  vec2 c = position;\n  vec2 z = c;\n  \n  float escape = 0.;\n  const float iter = 50.;\n  for(float i = 0.; i<iter; i++) {\n    escape = i;\n    float x = (z.x * z.x - z.y * z.y) + c.x;\n    float y = (z.y * z.x + z.x * z.y) + c.y;\n	\n    if ((x * x + y * y) > 800.0) break;\n    z.x = x;\n    z.y = y;\n  }\n  \n  float b = escape/iter;\n  \n  gl_FragColor = vec4(b,b,b,1.);\n}";

  shader = require("shader")({
    canvas: $("canvas")[0],
    vertex: vertexShaderSource,
    fragment: mandelbrot,
    uniforms: {
      boundsMin: [0, 0],
      boundsMax: [1, 1]
    }
  });

  shader.draw();

  pz = require("pan-zoom")({
    element: $("canvas")[0],
    minX: 0,
    maxX: 1,
    minY: 0,
    maxY: 1,
    flipY: true
  });

  pz.on("update", function() {
    return shader.draw({
      uniforms: {
        boundsMin: [pz.minX, pz.minY],
        boundsMax: [pz.maxX, pz.maxY]
      }
    });
  });

  window.next = function() {
    var bird;
    bird = $("img")[0];
    return shader.draw({
      fragment: fragmentShaderSource2,
      uniforms: {
        img: bird
      }
    });
  };

  window.next2 = function() {
    $("img").attr("src", "turtle.jpg");
    return shader.draw({
      uniforms: {
        img: $("img")[0]
      }
    });
  };

}).call(this);
