In this chapter we'll learn how to *sample* colors from input images. We'll be sampling from the live webcam video.

For historical reasons, input images are called *textures*, because in 3D applications they're usually used as textures for 3D objects.

Here's a shader which simply draws the webcam to the screen.

<div class="book-shader">
precision mediump float;

varying vec2 position;
uniform sampler2D webcam;

void main() {
  vec4 color = texture2D(webcam, position);
  gl_FragColor.r = color.r;
  gl_FragColor.g = color.g;
  gl_FragColor.b = color.b;
  gl_FragColor.a = 1.;
}
</div>

Notice that on line 7 we take













Time

In this chapter, we'll learn how to make shaders that change over time--animations. We'll also start working with *functions*, which let us manipulate numbers in ways that we couldn't do with just arithmetic.

We've seen how every pixel is an independent computer which has to compute what color to be. To do this computation, the pixel can use its `position` in the image. It can also use other information that we pass in to it.

In this case, we'll pass in `time`, which is a `float` (decimal number) that counts the number of seconds since the shader started running.


precision mediump float;

varying vec2 position;
uniform float time;

void main() {
  gl_FragColor.r = 0.;
  gl_FragColor.g = 0.;
  gl_FragColor.b = fract(time);
  gl_FragColor.a = 1.;
}


In the above shader, we're using `fract` of `time` to determine the blue value of the image.

`fract` is a function that gives us just the *fractional* part of a number. In other words, just the part of the number after the decimal point. More precisely, it gives the amount that the number exceeds the whole number below it.

* `fract(3.4) = 0.4`
* `fract(4.0) = 0.0`
* `fract(0.8) = 0.8`
* `fract(-2.3) = 0.7`

`fract` is an example of a *function*. In general, a function is a mathematical operation that takes in one or more *inputs* and spits out an *output*. Other examples of functions are `sin`, `cos`, `abs` (the absolute value), etc. We'll see how to use these functions later in the book.

When creating shaders, we *combine* functions and arithmetic to manipulate numbers to do just what we want them to do.

Let's practice combining `fract` and arithmetic to make different timings for the above animation.


